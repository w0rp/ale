import { Formatter } from './Formatter';
import { FormattingOptions } from './FormattingOptions';
/**
 * Runs the formatter for an entire project.
 */
export declare class Runner {
    formatter?: Formatter;
    run(runnerOptions: RunnerOptions): Promise<void>;
    /**
     * Get the list of file paths for this run.
     */
    private getFilePaths;
    /**
     * Load the options from bsfmt.json
     * @throws whenever a custom bsfmt path is provided and does not exist
     * @returns {FormattingOptions} when found, or null if not found
     */
    getBsfmtOptions(runnerOptions: RunnerOptions): FormattingOptions | null;
    normalizeArgs(args: RunnerOptions): RunnerOptions;
}
export interface RunnerOptions extends FormattingOptions {
    /**
     * A list of file paths or globs
     */
    files: string[];
    /**
     * The current working directory that should be used when running this runner
     */
    cwd?: string;
    /**
     * Rewrites all processed in place. It is recommended to commit your files before using this option
     */
    write?: boolean;
    /**
     * List any unformatted files and return a nonzero eror code if any were found
     */
    check?: boolean;
    /**
     * Print absolute file paths instead of relative paths
     */
    absolute?: boolean;
    /**
     * Don't read a bsfmt.json file
     */
    noBsfmt?: boolean;
    /**
     * Use a specified path to bsfmt.json insead of the default
     */
    bsfmtPath?: string;
}
