"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeKeywordCaseOverride = exports.normalizeOptions = void 0;
const Formatter_1 = require("./Formatter");
const brighterscript_1 = require("brighterscript");
function normalizeOptions(options) {
    let fullOptions = Object.assign({ indentStyle: 'spaces', indentSpaceCount: Formatter_1.Formatter.DEFAULT_INDENT_SPACE_COUNT, formatIndent: true, keywordCase: 'lower', compositeKeywords: 'split', removeTrailingWhiteSpace: true, keywordCaseOverride: {}, formatInteriorWhitespace: true, insertSpaceBeforeFunctionParenthesis: false, insertSpaceBetweenEmptyCurlyBraces: false, insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: true, insertSpaceBetweenAssociativeArrayLiteralKeyAndColon: false, formatMultiLineObjectsAndArrays: true }, options);
    if (!fullOptions.typeCase) {
        fullOptions.typeCase = fullOptions.keywordCase;
    }
    fullOptions.keywordCaseOverride = normalizeKeywordCaseOverride(fullOptions.keywordCaseOverride);
    fullOptions.typeCaseOverride = normalizeKeywordCaseOverride(fullOptions.typeCaseOverride);
    return fullOptions;
}
exports.normalizeOptions = normalizeOptions;
function normalizeKeywordCaseOverride(obj) {
    let result = {};
    //quit now if the object is not iterable
    if (!obj) {
        return result;
    }
    for (let key in obj) {
        let value = obj[key]
            ? obj[key].toLowerCase()
            : 'disabled';
        if (value === 'original') {
            value = 'disabled';
        }
        key = key
            //remove any whitespace
            .replace(/\s+/gi, '')
            //force key to lower case
            .toLowerCase();
        //replace some of the hash tokens with their corresponding TokenKind
        if (key === '#const') {
            key = brighterscript_1.TokenKind.HashConst.toLowerCase();
        }
        else if (key === '#else') {
            key = brighterscript_1.TokenKind.HashElse.toLowerCase();
        }
        else if (key === '#elseif') {
            key = brighterscript_1.TokenKind.HashElseIf.toLowerCase();
        }
        else if (key === '#endif') {
            key = brighterscript_1.TokenKind.HashEndIf.toLowerCase();
        }
        else if (key === '#error') {
            key = brighterscript_1.TokenKind.HashError.toLowerCase();
        }
        else if (key === '#if') {
            key = brighterscript_1.TokenKind.HashIf.toLowerCase();
        }
        result[key] = value;
    }
    return result;
}
exports.normalizeKeywordCaseOverride = normalizeKeywordCaseOverride;
//# sourceMappingURL=FormattingOptions.js.map