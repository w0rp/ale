"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fsExtra = require("fs-extra");
var path = require("path");
var fs = require("fs");
var Util = /** @class */ (function () {
    function Util() {
    }
    /**
     * Determine if `childPath` is contained within the `parentPath`
     * @param parentPath
     * @param childPath
     */
    Util.prototype.isParentOfPath = function (parentPath, childPath) {
        parentPath = exports.util.standardizePath(parentPath);
        childPath = exports.util.standardizePath(childPath);
        var relative = path.relative(parentPath, childPath);
        return relative && !relative.startsWith('..') && !path.isAbsolute(relative);
    };
    /**
     * Determines if the given path is a file
     * @param filePathAbsolute
     */
    Util.prototype.isFile = function (filePathAbsolute) {
        return __awaiter(this, void 0, void 0, function () {
            var realPathAbsolute, stat, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        realPathAbsolute = fs.realpathSync(filePathAbsolute);
                        return [4 /*yield*/, fsExtra.lstat(realPathAbsolute)];
                    case 1:
                        stat = _a.sent();
                        return [2 /*return*/, stat.isFile()];
                    case 2:
                        e_1 = _a.sent();
                        // lstatSync throws an error if path doesn't exist
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Normalize path and replace all directory separators with current OS separators
     * @param thePath
     */
    Util.prototype.standardizePath = function (thePath) {
        if (!thePath) {
            return thePath;
        }
        return path.normalize(thePath.replace(/[\/\\]+/g, path.sep));
    };
    /**
     * Convert all slashes to forward slashes
     */
    Util.prototype.toForwardSlashes = function (thePath) {
        if (typeof thePath === 'string') {
            return thePath.replace(/[\/\\]+/g, '/');
        }
        else {
            return thePath;
        }
    };
    /**
     * Do a case-insensitive string replacement
     * @param haystack
     * @param needle
     * @param replace
     */
    Util.prototype.stringReplaceInsensitive = function (haystack, needle, replace) {
        var idx = haystack.toLowerCase().indexOf(needle.toLowerCase());
        if (idx > -1) {
            return haystack.substr(0, idx) + replace + haystack.substr(idx + needle.length);
        }
        else {
            return haystack;
        }
    };
    /**
     * Keep calling the callback until it does NOT throw an exception, or until the max number of tries has been reached.
     * @param callback
     * @param maxTries
     * @param sleepMilliseconds
     */
    /* istanbul ignore next */ //typescript generates some weird while statement that can't get fully covered for some reason
    Util.prototype.tryRepeatAsync = function (callback, maxTries, sleepMilliseconds) {
        if (maxTries === void 0) { maxTries = 10; }
        if (sleepMilliseconds === void 0) { sleepMilliseconds = 50; }
        return __awaiter(this, void 0, void 0, function () {
            var tryCount, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tryCount = 0;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 9];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 8]);
                        return [4 /*yield*/, Promise.resolve(callback())];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        e_2 = _a.sent();
                        tryCount++;
                        if (!(tryCount > maxTries)) return [3 /*break*/, 5];
                        throw e_2;
                    case 5: return [4 /*yield*/, this.sleep(sleepMilliseconds)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [3 /*break*/, 8];
                    case 8: return [3 /*break*/, 1];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    Util.prototype.sleep = function (milliseconds) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve) {
                            setTimeout(resolve, milliseconds);
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Determine if a file exists (case insensitive)
     */
    Util.prototype.fileExistsCaseInsensitive = function (filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var lowerFilePath, parentDirPath, filesInDir, _i, filesInDir_1, dirFile, dirFilePath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filePath = this.standardizePath(filePath);
                        lowerFilePath = filePath.toLowerCase();
                        parentDirPath = path.dirname(filePath);
                        return [4 /*yield*/, fsExtra.pathExists(parentDirPath)];
                    case 1:
                        //file can't exist if its parent dir doesn't exist
                        if ((_a.sent()) === false) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, fsExtra.readdir(parentDirPath)];
                    case 2:
                        filesInDir = _a.sent();
                        //look at each file path until we find the one we're searching for
                        for (_i = 0, filesInDir_1 = filesInDir; _i < filesInDir_1.length; _i++) {
                            dirFile = filesInDir_1[_i];
                            dirFilePath = this.standardizePath(parentDirPath + "/" + dirFile);
                            if (dirFilePath.toLowerCase() === lowerFilePath) {
                                return [2 /*return*/, true];
                            }
                        }
                        return [2 /*return*/, false];
                }
            });
        });
    };
    return Util;
}());
exports.Util = Util;
exports.util = new Util();
/**
 * A tagged template literal function for standardizing the path.
 */
function standardizePath(stringParts) {
    var expressions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        expressions[_i - 1] = arguments[_i];
    }
    var result = [];
    for (var i = 0; i < stringParts.length; i++) {
        result.push(stringParts[i], expressions[i]);
    }
    return exports.util.standardizePath(result.join(''));
}
exports.standardizePath = standardizePath;
//# sourceMappingURL=util.js.map