export declare class Util {
    /**
     * Determine if `childPath` is contained within the `parentPath`
     * @param parentPath
     * @param childPath
     */
    isParentOfPath(parentPath: string, childPath: string): boolean;
    /**
     * Determines if the given path is a file
     * @param filePathAbsolute
     */
    isFile(filePathAbsolute: string): Promise<boolean>;
    /**
     * Normalize path and replace all directory separators with current OS separators
     * @param thePath
     */
    standardizePath(thePath: string): string;
    /**
     * Convert all slashes to forward slashes
     */
    toForwardSlashes(thePath: string): string;
    /**
     * Do a case-insensitive string replacement
     * @param haystack
     * @param needle
     * @param replace
     */
    stringReplaceInsensitive(haystack: string, needle: string, replace: string): string;
    /**
     * Keep calling the callback until it does NOT throw an exception, or until the max number of tries has been reached.
     * @param callback
     * @param maxTries
     * @param sleepMilliseconds
     */
    tryRepeatAsync<T>(callback: any, maxTries?: number, sleepMilliseconds?: number): Promise<T>;
    sleep(milliseconds: number): Promise<void>;
    /**
     * Determine if a file exists (case insensitive)
     */
    fileExistsCaseInsensitive(filePath: string): Promise<boolean>;
}
export declare let util: Util;
/**
 * A tagged template literal function for standardizing the path.
 */
export declare function standardizePath(stringParts: any, ...expressions: any[]): string;
