"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint no-template-curly-in-string: 0 */
const chai_1 = require("chai");
const _1 = require(".");
const Lexer_1 = require("./Lexer");
const Token_1 = require("./Token");
const Parser_spec_1 = require("../parser/Parser.spec");
const vscode_languageserver_1 = require("vscode-languageserver");
const util_1 = require("../util");
describe('lexer', () => {
    it('recognizes namespace keywords', () => {
        let { tokens } = Lexer_1.Lexer.scan('namespace end namespace endnamespace end   namespace');
        chai_1.expect(tokens.map(x => x.kind)).to.eql([
            _1.TokenKind.Namespace,
            _1.TokenKind.EndNamespace,
            _1.TokenKind.EndNamespace,
            _1.TokenKind.EndNamespace,
            _1.TokenKind.Eof
        ]);
    });
    it('recognizes the callfunc operator', () => {
        let { tokens } = Lexer_1.Lexer.scan('@.');
        chai_1.expect(tokens[0].kind).to.equal(_1.TokenKind.Callfunc);
    });
    it('recognizes the import token', () => {
        let { tokens } = Lexer_1.Lexer.scan('import');
        chai_1.expect(tokens[0].kind).to.eql(_1.TokenKind.Import);
    });
    it('recognizes library token', () => {
        let { tokens } = Lexer_1.Lexer.scan('library');
        chai_1.expect(tokens[0].kind).to.eql(_1.TokenKind.Library);
    });
    it('produces an at symbol token', () => {
        let { tokens } = Lexer_1.Lexer.scan('@');
        chai_1.expect(tokens[0].kind).to.equal(_1.TokenKind.At);
    });
    it('produces a semicolon token', () => {
        let { tokens } = Lexer_1.Lexer.scan(';');
        chai_1.expect(tokens[0].kind).to.equal(_1.TokenKind.Semicolon);
    });
    it('emits error on unknown character type', () => {
        let { diagnostics } = Lexer_1.Lexer.scan('\0');
        chai_1.expect(diagnostics).to.be.lengthOf(1);
    });
    it('includes an end-of-file marker', () => {
        let { tokens } = Lexer_1.Lexer.scan('');
        chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.Eof]);
    });
    it('ignores tabs and spaces', () => {
        let { tokens } = Lexer_1.Lexer.scan('\t\t  \t     \t');
        chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.Eof]);
    });
    it('retains every single newline', () => {
        let { tokens } = Lexer_1.Lexer.scan('\n\n\'foo\n\n\nprint 2\n\n');
        chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
            _1.TokenKind.Newline,
            _1.TokenKind.Newline,
            _1.TokenKind.Comment,
            _1.TokenKind.Newline,
            _1.TokenKind.Newline,
            _1.TokenKind.Newline,
            _1.TokenKind.Print,
            _1.TokenKind.IntegerLiteral,
            _1.TokenKind.Newline,
            _1.TokenKind.Newline,
            _1.TokenKind.Eof
        ]);
    });
    it('does not insert double newlines with the windows \\r\\n newline', () => {
        let kinds = Lexer_1.Lexer.scan('function boolToNumber() as string\r\n' +
            '   if true then\r\n' +
            '       print 1\r\n' +
            '   else\r\n' +
            '       print 0\r\n' +
            '   end if\r\n' +
            'end function\r\n').tokens.map(x => x.kind);
        chai_1.expect(kinds).to.eql([
            _1.TokenKind.Function, _1.TokenKind.Identifier, _1.TokenKind.LeftParen, _1.TokenKind.RightParen, _1.TokenKind.As, _1.TokenKind.String, _1.TokenKind.Newline,
            _1.TokenKind.If, _1.TokenKind.True, _1.TokenKind.Then, _1.TokenKind.Newline,
            _1.TokenKind.Print, _1.TokenKind.IntegerLiteral, _1.TokenKind.Newline,
            _1.TokenKind.Else, _1.TokenKind.Newline,
            _1.TokenKind.Print, _1.TokenKind.IntegerLiteral, _1.TokenKind.Newline,
            _1.TokenKind.EndIf, _1.TokenKind.Newline,
            _1.TokenKind.EndFunction, _1.TokenKind.Newline,
            _1.TokenKind.Eof
        ]);
    });
    it('computes range properly both with and without whitespace', () => {
        let withoutWhitespace = Lexer_1.Lexer.scan(`sub Main()\n    bob = true\nend sub`).tokens
            .map(x => Parser_spec_1.rangeToArray(x.range));
        let withWhitespace = Lexer_1.Lexer.scan(`sub Main()\n    bob = true\nend sub`).tokens
            //filter out the whitespace...we only care that it was computed during the scan
            .filter(x => x.kind !== _1.TokenKind.Whitespace)
            .map(x => Parser_spec_1.rangeToArray(x.range));
        /*eslint-disable */
        let expectedLocations = [
            [0, 0, 0, 3],
            [0, 4, 0, 8],
            [0, 8, 0, 9],
            [0, 9, 0, 10],
            [0, 10, 0, 11],
            [1, 4, 1, 7],
            [1, 8, 1, 9],
            [1, 10, 1, 14],
            [1, 14, 1, 15],
            [2, 0, 2, 7],
            [2, 7, 2, 8] //Eof
        ];
        /*eslint-enable*/
        chai_1.expect(withoutWhitespace, 'Without whitespace').to.eql(expectedLocations);
        chai_1.expect(withWhitespace, 'With whitespace').to.eql(expectedLocations);
    });
    it('retains original line endings', () => {
        let { tokens } = Lexer_1.Lexer.scan('print "hello"\r\nprint "world"\n');
        chai_1.expect([
            tokens[2].text.charCodeAt(0),
            tokens[2].text.charCodeAt(1)
        ], 'should contain \\r\\n').to.eql([13, 10]);
        chai_1.expect(tokens[5].text.charCodeAt(0), 'should contain \\r\\n').to.eql(10);
    });
    it('correctly identifies the elseif token', () => {
        let { tokens } = Lexer_1.Lexer.scan('else if elseif else   if');
        chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
            _1.TokenKind.ElseIf,
            _1.TokenKind.ElseIf,
            _1.TokenKind.ElseIf,
            _1.TokenKind.Eof
        ]);
    });
    it('gives the `as` keyword its own TokenKind', () => {
        let { tokens } = Lexer_1.Lexer.scan('as');
        chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.As, _1.TokenKind.Eof]);
    });
    it('gives the `stop` keyword its own TokenKind', () => {
        let { tokens } = Lexer_1.Lexer.scan('stop');
        chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.Stop, _1.TokenKind.Eof]);
    });
    it('aliases \'?\' to \'print\'', () => {
        let { tokens } = Lexer_1.Lexer.scan('?2');
        chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.Print, _1.TokenKind.IntegerLiteral, _1.TokenKind.Eof]);
    });
    describe('comments', () => {
        it('does not include carriage return character', () => {
            let tokens = Lexer_1.Lexer.scan(`'someComment\r\nprint "hello"`).tokens;
            chai_1.expect(tokens[0].text).to.equal(`'someComment`);
        });
        it('includes the comment characters in the text', () => {
            let text = Lexer_1.Lexer.scan(`
                'comment
                REM some comment
            `).tokens
                .filter(x => ![_1.TokenKind.Newline, _1.TokenKind.Eof].includes(x.kind))
                .map(x => x.text);
            chai_1.expect(text).to.eql([
                `'comment`,
                'REM some comment'
            ]);
        });
        it('tracks the correct location', () => {
            let tokens = Lexer_1.Lexer.scan(`
                sub main() 'first comment
                    k = 2 ' second comment
                    REM third comment
                end sub
            `, {
                includeWhitespace: true
            }).tokens.map(x => [...Parser_spec_1.rangeToArray(x.range), x.text]);
            chai_1.expect(tokens).to.eql([
                [0, 0, 0, 1, '\n'],
                [1, 0, 1, 16, '                '],
                [1, 16, 1, 19, 'sub'],
                [1, 19, 1, 20, ' '],
                [1, 20, 1, 24, 'main'],
                [1, 24, 1, 25, '('],
                [1, 25, 1, 26, ')'],
                [1, 26, 1, 27, ' '],
                [1, 27, 1, 41, `'first comment`],
                [1, 41, 1, 42, '\n'],
                [2, 0, 2, 20, '                    '],
                [2, 20, 2, 21, 'k'],
                [2, 21, 2, 22, ' '],
                [2, 22, 2, 23, '='],
                [2, 23, 2, 24, ' '],
                [2, 24, 2, 25, '2'],
                [2, 25, 2, 26, ' '],
                [2, 26, 2, 42, `' second comment`],
                [2, 42, 2, 43, '\n'],
                [3, 0, 3, 20, '                    '],
                [3, 20, 3, 37, 'REM third comment'],
                [3, 37, 3, 38, '\n'],
                [4, 0, 4, 16, '                '],
                [4, 16, 4, 23, 'end sub'],
                [4, 23, 4, 24, '\n'],
                [5, 0, 5, 12, '            '],
                [5, 12, 5, 13, ''] //EOF
            ]);
        });
        it('tracks the correct location for comments', () => {
            let tokens = Lexer_1.Lexer.scan(`
                'comment
                REM some comment
            `).tokens.filter(x => ![_1.TokenKind.Newline, _1.TokenKind.Eof].includes(x.kind));
            chai_1.expect(tokens[0].range).to.eql(vscode_languageserver_1.Range.create(1, 16, 1, 24));
            chai_1.expect(tokens[1].range).to.eql(vscode_languageserver_1.Range.create(2, 16, 2, 32));
        });
        it('finds correct location for newlines', () => {
            let tokens = Lexer_1.Lexer.scan('sub\nsub\r\nsub\n\n').tokens
                //ignore the Eof token
                .filter(x => x.kind !== _1.TokenKind.Eof);
            chai_1.expect(tokens.map(x => x.range)).to.eql([
                vscode_languageserver_1.Range.create(0, 0, 0, 3),
                vscode_languageserver_1.Range.create(0, 3, 0, 4),
                vscode_languageserver_1.Range.create(1, 0, 1, 3),
                vscode_languageserver_1.Range.create(1, 3, 1, 5),
                vscode_languageserver_1.Range.create(2, 0, 2, 3),
                vscode_languageserver_1.Range.create(2, 3, 2, 4),
                vscode_languageserver_1.Range.create(3, 0, 3, 1) //  /n
            ]);
        });
        it('finds correct location for comment after if statement', () => {
            let { tokens } = Lexer_1.Lexer.scan(`
                sub a()
                    if true then
                        print false
                    else if true then
                        print "true"
                    else
                        print "else"
                    end if 'comment
                end sub
            `);
            let comments = tokens.filter(x => x.kind === _1.TokenKind.Comment);
            chai_1.expect(comments).to.be.lengthOf(1);
            chai_1.expect(comments[0].range).to.eql(vscode_languageserver_1.Range.create(8, 27, 8, 35));
        });
        it('ignores everything after `\'`', () => {
            let { tokens } = Lexer_1.Lexer.scan('= \' (');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.Equal, _1.TokenKind.Comment, _1.TokenKind.Eof]);
        });
        it('ignores everything after `REM`', () => {
            let { tokens } = Lexer_1.Lexer.scan('= REM (');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.Equal, _1.TokenKind.Comment, _1.TokenKind.Eof]);
        });
        it('ignores everything after `rem`', () => {
            let { tokens } = Lexer_1.Lexer.scan('= rem (');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.Equal, _1.TokenKind.Comment, _1.TokenKind.Eof]);
        });
    }); // comments
    describe('non-literals', () => {
        it('reads parens & braces', () => {
            let { tokens } = Lexer_1.Lexer.scan('(){}');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.LeftParen,
                _1.TokenKind.RightParen,
                _1.TokenKind.LeftCurlyBrace,
                _1.TokenKind.RightCurlyBrace,
                _1.TokenKind.Eof
            ]);
        });
        it('reads operators', () => {
            let { tokens } = Lexer_1.Lexer.scan('^ - + * MOD / \\ -- ++');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.Caret,
                _1.TokenKind.Minus,
                _1.TokenKind.Plus,
                _1.TokenKind.Star,
                _1.TokenKind.Mod,
                _1.TokenKind.Forwardslash,
                _1.TokenKind.Backslash,
                _1.TokenKind.MinusMinus,
                _1.TokenKind.PlusPlus,
                _1.TokenKind.Eof
            ]);
        });
        it('reads bitshift operators', () => {
            let { tokens } = Lexer_1.Lexer.scan('<< >> <<');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.LeftShift,
                _1.TokenKind.RightShift,
                _1.TokenKind.LeftShift,
                _1.TokenKind.Eof
            ]);
        });
        it('reads bitshift assignment operators', () => {
            let { tokens } = Lexer_1.Lexer.scan('<<= >>=');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.LeftShiftEqual,
                _1.TokenKind.RightShiftEqual,
                _1.TokenKind.Eof
            ]);
        });
        it('reads comparators', () => {
            let { tokens } = Lexer_1.Lexer.scan('< <= > >= = <>');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.Less,
                _1.TokenKind.LessEqual,
                _1.TokenKind.Greater,
                _1.TokenKind.GreaterEqual,
                _1.TokenKind.Equal,
                _1.TokenKind.LessGreater,
                _1.TokenKind.Eof
            ]);
        });
    }); // non-literals
    describe('string literals', () => {
        it('produces string literal tokens', () => {
            let { tokens } = Lexer_1.Lexer.scan(`"hello world"`);
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([_1.TokenKind.StringLiteral, _1.TokenKind.Eof]);
        });
        it(`safely escapes " literals`, () => {
            let { tokens } = Lexer_1.Lexer.scan(`"the cat says ""meow"""`);
            chai_1.expect(tokens[0].kind).to.equal(_1.TokenKind.StringLiteral);
        });
        it('captures text to end of line for unterminated strings with LF', () => {
            let { tokens } = Lexer_1.Lexer.scan(`"unterminated!\n`);
            chai_1.expect(tokens[0].kind).to.eql(_1.TokenKind.StringLiteral);
        });
        it('captures text to end of line for unterminated strings with CRLF', () => {
            let { tokens } = Lexer_1.Lexer.scan(`"unterminated!\r\n`);
            chai_1.expect(tokens[0].text).to.equal('"unterminated!');
        });
        it('disallows multiline strings', () => {
            let { diagnostics } = Lexer_1.Lexer.scan(`"multi-line\n\n`);
            chai_1.expect(diagnostics.map(err => err.message)).to.deep.equal([
                'Unterminated string at end of line'
            ]);
        });
    });
    // template string literals
    describe('template string literals', () => {
        it('supports escaped chars', () => {
            let { tokens } = Lexer_1.Lexer.scan('`\\n\\`\\r\\n`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
            chai_1.expect(tokens.map(x => x.charCode).filter(x => !!x)).to.eql([
                10,
                96,
                13,
                10
            ]);
        });
        it('prevents expressions when escaping the dollar sign', () => {
            let { tokens } = Lexer_1.Lexer.scan('`\\${just text}`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
        });
        it('supports escaping unicode char codes', () => {
            let { tokens } = Lexer_1.Lexer.scan('`\\c1\\c12\\c123`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
            chai_1.expect(tokens.map(x => x.charCode).filter(x => !!x)).to.eql([
                1,
                12,
                123
            ]);
        });
        it('converts doublequote to EscapedCharCodeLiteral', () => {
            let { tokens } = Lexer_1.Lexer.scan('`"`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
            chai_1.expect(tokens[2].charCode).to.equal(34);
        });
        it(`safely escapes \` literals`, () => {
            let { tokens } = Lexer_1.Lexer.scan('`the cat says \\`meow\\` a lot`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
            chai_1.expect(tokens.map(x => x.text)).to.eql([
                '`',
                'the cat says ',
                '\\`',
                'meow',
                '\\`',
                ' a lot',
                '`',
                '' //EOF
            ]);
        });
        it('produces template string literal tokens', () => {
            let { tokens } = Lexer_1.Lexer.scan('`hello world`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
            chai_1.expect(tokens[1].text).to.deep.equal('hello world');
        });
        it('collects quasis outside and expressions inside of template strings', () => {
            let { tokens } = Lexer_1.Lexer.scan('`hello ${"world"}!`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.StringLiteral,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
            chai_1.expect(tokens[1].text).to.deep.equal(`hello `);
        });
        it('real example, which is causing issues in the formatter', () => {
            let { tokens } = Lexer_1.Lexer.scan(`
                function getItemXML(item)
                    return \`
                        <rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
                        <channel>
                            <title>smithsonian</title>
                            <item>
                                <title>\${item.title}</title>
                                <guid>\${item.vamsId}</guid>
                                <media:rating scheme="urn:v-chip">\${item.ratings.first.code.name}</media:rating>
                            </item>
                        </channel>
                        </rss>
                    \`
                end function
            `);
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.Newline,
                _1.TokenKind.Function,
                _1.TokenKind.Identifier,
                _1.TokenKind.LeftParen,
                _1.TokenKind.Identifier,
                _1.TokenKind.RightParen,
                _1.TokenKind.Newline,
                _1.TokenKind.Return,
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Newline,
                _1.TokenKind.EndFunction,
                _1.TokenKind.Newline,
                _1.TokenKind.Eof
            ]);
        });
        it('complicated example', () => {
            let { tokens } = Lexer_1.Lexer.scan('`hello ${"world"}!I am a ${"template" + "string"} and I am very ${["pleased"][0]} to meet you ${m.top.getChildCount()}.The end`');
            chai_1.expect(tokens.map(t => t.kind)).to.eql([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.StringLiteral,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.StringLiteral,
                _1.TokenKind.Plus,
                _1.TokenKind.StringLiteral,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.LeftSquareBracket,
                _1.TokenKind.StringLiteral,
                _1.TokenKind.RightSquareBracket,
                _1.TokenKind.LeftSquareBracket,
                _1.TokenKind.IntegerLiteral,
                _1.TokenKind.RightSquareBracket,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.LeftParen,
                _1.TokenKind.RightParen,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
        });
        it('allows multiline strings', () => {
            let { tokens } = Lexer_1.Lexer.scan('`multi-line\n\n`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
            chai_1.expect(tokens.map(x => x.text)).to.eql([
                '`',
                'multi-line',
                '\n',
                '',
                '\n',
                '',
                '`',
                '' //EOF
            ]);
        });
        it('maintains proper line/column locations for multiline strings', () => {
            let { tokens } = Lexer_1.Lexer.scan('123 `multi\nline\r\nstrings` true\nfalse');
            chai_1.expect(tokens.map(x => {
                return {
                    range: x.range,
                    kind: x.kind
                };
            })).to.eql([
                { range: vscode_languageserver_1.Range.create(0, 0, 0, 3), kind: _1.TokenKind.IntegerLiteral },
                { range: vscode_languageserver_1.Range.create(0, 4, 0, 5), kind: _1.TokenKind.BackTick },
                { range: vscode_languageserver_1.Range.create(0, 5, 0, 10), kind: _1.TokenKind.TemplateStringQuasi },
                { range: vscode_languageserver_1.Range.create(0, 10, 0, 11), kind: _1.TokenKind.EscapedCharCodeLiteral },
                { range: vscode_languageserver_1.Range.create(1, 0, 1, 4), kind: _1.TokenKind.TemplateStringQuasi },
                { range: vscode_languageserver_1.Range.create(1, 4, 1, 5), kind: _1.TokenKind.EscapedCharCodeLiteral },
                { range: vscode_languageserver_1.Range.create(1, 5, 1, 6), kind: _1.TokenKind.EscapedCharCodeLiteral },
                { range: vscode_languageserver_1.Range.create(2, 0, 2, 7), kind: _1.TokenKind.TemplateStringQuasi },
                { range: vscode_languageserver_1.Range.create(2, 7, 2, 8), kind: _1.TokenKind.BackTick },
                { range: vscode_languageserver_1.Range.create(2, 9, 2, 13), kind: _1.TokenKind.True },
                { range: vscode_languageserver_1.Range.create(2, 13, 2, 14), kind: _1.TokenKind.Newline },
                { range: vscode_languageserver_1.Range.create(3, 0, 3, 5), kind: _1.TokenKind.False },
                { range: vscode_languageserver_1.Range.create(3, 5, 3, 6), kind: _1.TokenKind.Eof }
            ]);
        });
        it('Example that tripped up the expression tests', () => {
            let { tokens } = Lexer_1.Lexer.scan('`I am a complex example\n${a.isRunning(["a","b","c"])}\nmore ${m.finish(true)}`');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.BackTick,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.LeftParen,
                _1.TokenKind.LeftSquareBracket,
                _1.TokenKind.StringLiteral,
                _1.TokenKind.Comma,
                _1.TokenKind.StringLiteral,
                _1.TokenKind.Comma,
                _1.TokenKind.StringLiteral,
                _1.TokenKind.RightSquareBracket,
                _1.TokenKind.RightParen,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.EscapedCharCodeLiteral,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.TemplateStringExpressionBegin,
                _1.TokenKind.Identifier,
                _1.TokenKind.Dot,
                _1.TokenKind.Identifier,
                _1.TokenKind.LeftParen,
                _1.TokenKind.True,
                _1.TokenKind.RightParen,
                _1.TokenKind.TemplateStringExpressionEnd,
                _1.TokenKind.TemplateStringQuasi,
                _1.TokenKind.BackTick,
                _1.TokenKind.Eof
            ]);
        });
    }); // string literals
    describe('double literals', () => {
        it('respects \'#\' suffix', () => {
            let d = Lexer_1.Lexer.scan('123#').tokens[0];
            chai_1.expect(d.kind).to.equal(_1.TokenKind.DoubleLiteral);
            chai_1.expect(d.text).to.eql('123#');
        });
        it('forces literals >= 10 digits into doubles', () => {
            let d = Lexer_1.Lexer.scan('0000000005').tokens[0];
            chai_1.expect(d.kind).to.equal(_1.TokenKind.DoubleLiteral);
            chai_1.expect(d.text).to.eql('0000000005');
        });
        it('forces literals with \'D\' in exponent into doubles', () => {
            let d = Lexer_1.Lexer.scan('2.5d3').tokens[0];
            chai_1.expect(d.kind).to.equal(_1.TokenKind.DoubleLiteral);
            chai_1.expect(d.text).to.eql('2.5d3');
        });
        it('allows digits before `.` to be elided', () => {
            let f = Lexer_1.Lexer.scan('.123#').tokens[0];
            chai_1.expect(f.kind).to.equal(_1.TokenKind.DoubleLiteral);
            chai_1.expect(f.text).to.eql('.123#');
        });
        it('allows digits after `.` to be elided', () => {
            let f = Lexer_1.Lexer.scan('12.#').tokens[0];
            chai_1.expect(f.kind).to.equal(_1.TokenKind.DoubleLiteral);
            chai_1.expect(f.text).to.eql('12.#');
        });
    });
    describe('float literals', () => {
        it('respects \'!\' suffix', () => {
            let f = Lexer_1.Lexer.scan('0.00000008!').tokens[0];
            chai_1.expect(f.kind).to.equal(_1.TokenKind.FloatLiteral);
            // Floating precision will make this *not* equal
            chai_1.expect(f.text).not.to.equal(8e-8);
            chai_1.expect(f.text).to.eql('0.00000008!');
        });
        it('forces literals with a decimal into floats', () => {
            let f = Lexer_1.Lexer.scan('1.0').tokens[0];
            chai_1.expect(f.kind).to.equal(_1.TokenKind.FloatLiteral);
            chai_1.expect(f.text).to.equal('1.0');
        });
        it('forces literals with \'E\' in exponent into floats', () => {
            let f = Lexer_1.Lexer.scan('2.5e3').tokens[0];
            chai_1.expect(f.kind).to.equal(_1.TokenKind.FloatLiteral);
            chai_1.expect(f.text).to.eql('2.5e3');
        });
        it('allows digits before `.` to be elided', () => {
            let f = Lexer_1.Lexer.scan('.123').tokens[0];
            chai_1.expect(f.kind).to.equal(_1.TokenKind.FloatLiteral);
            chai_1.expect(f.text).to.equal('.123');
        });
        it('allows digits after `.` to be elided', () => {
            let f = Lexer_1.Lexer.scan('12.').tokens[0];
            chai_1.expect(f.kind).to.equal(_1.TokenKind.FloatLiteral);
            chai_1.expect(f.text).to.equal('12.');
        });
    });
    describe('long integer literals', () => {
        it('supports hexadecimal literals', () => {
            let i = Lexer_1.Lexer.scan('&hf00d&').tokens[0];
            chai_1.expect(i.kind).to.equal(_1.TokenKind.LongIntegerLiteral);
            chai_1.expect(i.text).to.equal('&hf00d&');
        });
        it('allows very long Int64 literals', () => {
            let li = Lexer_1.Lexer.scan('9876543210&').tokens[0];
            chai_1.expect(li.kind).to.equal(_1.TokenKind.LongIntegerLiteral);
            chai_1.expect(li.text).to.equal('9876543210&');
        });
        it('forces literals with \'&\' suffix into Int64s', () => {
            let li = Lexer_1.Lexer.scan('123&').tokens[0];
            chai_1.expect(li.kind).to.equal(_1.TokenKind.LongIntegerLiteral);
            chai_1.expect(li.text).to.deep.equal('123&');
        });
    });
    describe('integer literals', () => {
        it('supports hexadecimal literals', () => {
            let i = Lexer_1.Lexer.scan('&hFf').tokens[0];
            chai_1.expect(i.kind).to.equal(_1.TokenKind.IntegerLiteral);
            chai_1.expect(i.text).to.deep.equal('&hFf');
        });
        it('falls back to a regular integer', () => {
            let i = Lexer_1.Lexer.scan('123').tokens[0];
            chai_1.expect(i.kind).to.equal(_1.TokenKind.IntegerLiteral);
            chai_1.expect(i.text).to.deep.equal('123');
        });
    });
    describe('types', () => {
        it('captures type tokens', () => {
            chai_1.expect(Lexer_1.Lexer.scan(`
                void boolean integer longinteger float double string object interface invalid dynamic
            `.trim()).tokens.map(x => x.kind)).to.eql([
                _1.TokenKind.Void,
                _1.TokenKind.Boolean,
                _1.TokenKind.Integer,
                _1.TokenKind.LongInteger,
                _1.TokenKind.Float,
                _1.TokenKind.Double,
                _1.TokenKind.String,
                _1.TokenKind.Object,
                _1.TokenKind.Interface,
                _1.TokenKind.Invalid,
                _1.TokenKind.Dynamic,
                _1.TokenKind.Eof
            ]);
        });
    });
    describe('identifiers', () => {
        it('matches single-word keywords', () => {
            // test just a sample of single-word reserved words for now.
            // if we find any that we've missed
            let { tokens } = Lexer_1.Lexer.scan('and then or if else endif return true false line_num');
            chai_1.expect(tokens.map(w => w.kind)).to.deep.equal([
                _1.TokenKind.And,
                _1.TokenKind.Then,
                _1.TokenKind.Or,
                _1.TokenKind.If,
                _1.TokenKind.Else,
                _1.TokenKind.EndIf,
                _1.TokenKind.Return,
                _1.TokenKind.True,
                _1.TokenKind.False,
                _1.TokenKind.LineNumLiteral,
                _1.TokenKind.Eof
            ]);
        });
        it('matches multi-word keywords', () => {
            let { tokens } = Lexer_1.Lexer.scan('else if end if end while End Sub end Function Exit wHILe');
            chai_1.expect(tokens.map(w => w.kind)).to.deep.equal([
                _1.TokenKind.ElseIf,
                _1.TokenKind.EndIf,
                _1.TokenKind.EndWhile,
                _1.TokenKind.EndSub,
                _1.TokenKind.EndFunction,
                _1.TokenKind.ExitWhile,
                _1.TokenKind.Eof
            ]);
        });
        it('accepts \'exit for\' but not \'exitfor\'', () => {
            let { tokens } = Lexer_1.Lexer.scan('exit for exitfor');
            chai_1.expect(tokens.map(w => w.kind)).to.deep.equal([
                _1.TokenKind.ExitFor,
                _1.TokenKind.Identifier,
                _1.TokenKind.Eof
            ]);
        });
        it('matches keywords with silly capitalization', () => {
            let { tokens } = Lexer_1.Lexer.scan('iF ELSE eNDIf FUncTioN');
            chai_1.expect(tokens.map(w => w.kind)).to.deep.equal([
                _1.TokenKind.If,
                _1.TokenKind.Else,
                _1.TokenKind.EndIf,
                _1.TokenKind.Function,
                _1.TokenKind.Eof
            ]);
        });
        it('allows alpha-numeric (plus \'_\') identifiers', () => {
            let identifier = Lexer_1.Lexer.scan('_abc_123_').tokens[0];
            chai_1.expect(identifier.kind).to.equal(_1.TokenKind.Identifier);
            chai_1.expect(identifier.text).to.equal('_abc_123_');
        });
        it('allows identifiers with trailing type designators', () => {
            let { tokens } = Lexer_1.Lexer.scan('lorem$ ipsum% dolor! sit# amet&');
            let identifiers = tokens.filter(t => t.kind !== _1.TokenKind.Eof);
            chai_1.expect(identifiers.every(t => t.kind === _1.TokenKind.Identifier));
            chai_1.expect(identifiers.map(t => t.text)).to.deep.equal([
                'lorem$',
                'ipsum%',
                'dolor!',
                'sit#',
                'amet&'
            ]);
        });
    });
    describe('conditional compilation', () => {
        it('reads constant declarations', () => {
            let { tokens } = Lexer_1.Lexer.scan('#const foo true');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.HashConst,
                _1.TokenKind.Identifier,
                _1.TokenKind.True,
                _1.TokenKind.Eof
            ]);
        });
        it('reads constant aliases', () => {
            let { tokens } = Lexer_1.Lexer.scan('#const bar foo');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.HashConst,
                _1.TokenKind.Identifier,
                _1.TokenKind.Identifier,
                _1.TokenKind.Eof
            ]);
        });
        it('reads conditional directives', () => {
            let { tokens } = Lexer_1.Lexer.scan(`
                #if
                #else if
                #elseif
                #else
                #end if
                #endif
            `, {
                includeWhitespace: false
            });
            chai_1.expect(tokens.map(t => t.kind).filter(x => x !== _1.TokenKind.Newline)).to.deep.equal([
                _1.TokenKind.HashIf,
                _1.TokenKind.HashElseIf,
                _1.TokenKind.HashElseIf,
                _1.TokenKind.HashElse,
                _1.TokenKind.HashEndIf,
                _1.TokenKind.HashEndIf,
                _1.TokenKind.Eof
            ]);
        });
        it('treats text "constructor" as an identifier', () => {
            let lexer = Lexer_1.Lexer.scan(`function constructor()\nend function`);
            chai_1.expect(lexer.tokens[1].kind).to.equal(_1.TokenKind.Identifier);
        });
        it('reads upper case conditional directives', () => {
            let { tokens } = Lexer_1.Lexer.scan(`
                #IF
                #ELSE IF
                #ELSEIF
                #ELSE
                #END IF
                #ENDIF
            `, {
                includeWhitespace: false
            });
            chai_1.expect(tokens.map(t => t.kind).filter(x => x !== _1.TokenKind.Newline)).to.deep.equal([
                _1.TokenKind.HashIf,
                _1.TokenKind.HashElseIf,
                _1.TokenKind.HashElseIf,
                _1.TokenKind.HashElse,
                _1.TokenKind.HashEndIf,
                _1.TokenKind.HashEndIf,
                _1.TokenKind.Eof
            ]);
        });
        it('supports various spacings between #endif', () => {
            let { tokens } = Lexer_1.Lexer.scan('#endif #end if #end\tif #end  if #end\t\t if');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.HashEndIf,
                _1.TokenKind.HashEndIf,
                _1.TokenKind.HashEndIf,
                _1.TokenKind.HashEndIf,
                _1.TokenKind.HashEndIf,
                _1.TokenKind.Eof
            ]);
        });
        it('reads forced compilation diagnostics with messages', () => {
            let { tokens } = Lexer_1.Lexer.scan('#error a message goes here\n', {
                includeWhitespace: true
            });
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.HashError,
                _1.TokenKind.Whitespace,
                _1.TokenKind.HashErrorMessage,
                _1.TokenKind.Newline,
                _1.TokenKind.Eof
            ]);
            chai_1.expect(tokens[2].text).to.equal('a message goes here');
        });
    });
    describe('location tracking', () => {
        it('tracks starting and ending locations including whitespace', () => {
            let { tokens } = Lexer_1.Lexer.scan(`sub foo()\n    print "bar"\r\nend sub`, { includeWhitespace: true });
            chai_1.expect(tokens.map(t => t.range)).to.eql([
                vscode_languageserver_1.Range.create(0, 0, 0, 3),
                vscode_languageserver_1.Range.create(0, 3, 0, 4),
                vscode_languageserver_1.Range.create(0, 4, 0, 7),
                vscode_languageserver_1.Range.create(0, 7, 0, 8),
                vscode_languageserver_1.Range.create(0, 8, 0, 9),
                vscode_languageserver_1.Range.create(0, 9, 0, 10),
                vscode_languageserver_1.Range.create(1, 0, 1, 4),
                vscode_languageserver_1.Range.create(1, 4, 1, 9),
                vscode_languageserver_1.Range.create(1, 9, 1, 10),
                vscode_languageserver_1.Range.create(1, 10, 1, 15),
                vscode_languageserver_1.Range.create(1, 15, 1, 17),
                vscode_languageserver_1.Range.create(2, 0, 2, 7),
                vscode_languageserver_1.Range.create(2, 7, 2, 8) // EOF
            ]);
        });
        it('tracks starting and ending locations excluding whitespace', () => {
            let { tokens } = Lexer_1.Lexer.scan(`sub foo()\n    print "bar"\r\nend sub`, { includeWhitespace: false });
            chai_1.expect(tokens.map(t => t.range)).to.eql([
                vscode_languageserver_1.Range.create(0, 0, 0, 3),
                vscode_languageserver_1.Range.create(0, 4, 0, 7),
                vscode_languageserver_1.Range.create(0, 7, 0, 8),
                vscode_languageserver_1.Range.create(0, 8, 0, 9),
                vscode_languageserver_1.Range.create(0, 9, 0, 10),
                vscode_languageserver_1.Range.create(1, 4, 1, 9),
                vscode_languageserver_1.Range.create(1, 10, 1, 15),
                vscode_languageserver_1.Range.create(1, 15, 1, 17),
                vscode_languageserver_1.Range.create(2, 0, 2, 7),
                vscode_languageserver_1.Range.create(2, 7, 2, 8) // EOF
            ]);
        });
    });
    describe('two word keywords', () => {
        it('supports various spacing between for each', () => {
            let { tokens } = Lexer_1.Lexer.scan('for each for  each for    each for\teach for\t each for \teach for \t each');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.ForEach,
                _1.TokenKind.ForEach,
                _1.TokenKind.ForEach,
                _1.TokenKind.ForEach,
                _1.TokenKind.ForEach,
                _1.TokenKind.ForEach,
                _1.TokenKind.ForEach,
                _1.TokenKind.Eof
            ]);
        });
        it('supports various spacing between else if', () => {
            let { tokens } = Lexer_1.Lexer.scan('else if else  if else    if else\tif else\t if else \tif else \t if');
            chai_1.expect(tokens.map(t => t.kind)).to.deep.equal([
                _1.TokenKind.ElseIf,
                _1.TokenKind.ElseIf,
                _1.TokenKind.ElseIf,
                _1.TokenKind.ElseIf,
                _1.TokenKind.ElseIf,
                _1.TokenKind.ElseIf,
                _1.TokenKind.ElseIf,
                _1.TokenKind.Eof
            ]);
        });
    });
    it('detects rem when used as keyword', () => {
        let { tokens } = Lexer_1.Lexer.scan('person.rem=true');
        chai_1.expect(tokens.map(t => t.kind)).to.eql([
            _1.TokenKind.Identifier,
            _1.TokenKind.Dot,
            _1.TokenKind.Identifier,
            _1.TokenKind.Equal,
            _1.TokenKind.True,
            _1.TokenKind.Eof
        ]);
        //verify the location of `rem`
        chai_1.expect(tokens.map(t => [t.range.start.character, t.range.end.character])).to.eql([
            [0, 6],
            [6, 7],
            [7, 10],
            [10, 11],
            [11, 15],
            [15, 16] // EOF
        ]);
    });
    describe('isToken', () => {
        it('works', () => {
            let range = vscode_languageserver_1.Range.create(0, 0, 0, 2);
            chai_1.expect(Token_1.isToken({ kind: _1.TokenKind.And, text: 'and', range: range })).is.true;
            chai_1.expect(Token_1.isToken({ text: 'and', range: range })).is.false;
        });
    });
    it('recognizes class-related keywords', () => {
        chai_1.expect(Lexer_1.Lexer.scan('class public protected private end class endclass new override').tokens.map(x => x.kind)).to.eql([
            _1.TokenKind.Class,
            _1.TokenKind.Public,
            _1.TokenKind.Protected,
            _1.TokenKind.Private,
            _1.TokenKind.EndClass,
            _1.TokenKind.EndClass,
            _1.TokenKind.New,
            _1.TokenKind.Override,
            _1.TokenKind.Eof
        ]);
    });
    describe('whitespace', () => {
        it('preserves the exact number of whitespace characterswhitespace', () => {
            let { tokens } = Lexer_1.Lexer.scan('   ', { includeWhitespace: true });
            chai_1.expect(tokens[0]).to.include({
                kind: _1.TokenKind.Whitespace,
                text: '   '
            });
        });
        it('tokenizes whitespace between things', () => {
            let { tokens } = Lexer_1.Lexer.scan('sub main ( ) \n end sub', { includeWhitespace: true });
            chai_1.expect(tokens.map(x => x.kind)).to.eql([
                _1.TokenKind.Sub,
                _1.TokenKind.Whitespace,
                _1.TokenKind.Identifier,
                _1.TokenKind.Whitespace,
                _1.TokenKind.LeftParen,
                _1.TokenKind.Whitespace,
                _1.TokenKind.RightParen,
                _1.TokenKind.Whitespace,
                _1.TokenKind.Newline,
                _1.TokenKind.Whitespace,
                _1.TokenKind.EndSub,
                _1.TokenKind.Eof
            ]);
        });
    });
    it('identifies brighterscript source literals', () => {
        let { tokens } = Lexer_1.Lexer.scan('LINE_NUM SOURCE_FILE_PATH SOURCE_LINE_NUM FUNCTION_NAME SOURCE_FUNCTION_NAME SOURCE_LOCATION PKG_PATH PKG_LOCATION');
        chai_1.expect(tokens.map(x => x.kind)).to.eql([
            _1.TokenKind.LineNumLiteral,
            _1.TokenKind.SourceFilePathLiteral,
            _1.TokenKind.SourceLineNumLiteral,
            _1.TokenKind.FunctionNameLiteral,
            _1.TokenKind.SourceFunctionNameLiteral,
            _1.TokenKind.SourceLocationLiteral,
            _1.TokenKind.PkgPathLiteral,
            _1.TokenKind.PkgLocationLiteral,
            _1.TokenKind.Eof
        ]);
    });
    it('properly tracks leadingWhitespace', () => {
        const text = `
            sub main()

                print "main"\r\n\n

            end sub
        `;
        const { tokens } = Lexer_1.Lexer.scan(text, { includeWhitespace: false });
        chai_1.expect(util_1.default.tokensToString(tokens)).to.equal(text);
    });
    it('properly detects try/catch tokens', () => {
        const { tokens } = Lexer_1.Lexer.scan(`try catch endtry end try throw`, { includeWhitespace: false });
        chai_1.expect(tokens.map(x => x.kind)).to.eql([
            _1.TokenKind.Try,
            _1.TokenKind.Catch,
            _1.TokenKind.EndTry,
            _1.TokenKind.EndTry,
            _1.TokenKind.Throw,
            _1.TokenKind.Eof
        ]);
    });
});
//# sourceMappingURL=Lexer.spec.js.map