import type { BsConfig } from './BsConfig';
import type { BsDiagnostic } from './interfaces';
import type { FileResolver } from './Program';
import { Program } from './Program';
import { Logger } from './Logger';
import PluginInterface from './PluginInterface';
/**
 * A runner class that handles
 */
export declare class ProgramBuilder {
    /**
     * Determines whether the console should be cleared after a run (true for cli, false for languageserver)
     */
    allowConsoleClearing: boolean;
    options: BsConfig;
    private isRunning;
    private watcher;
    program: Program;
    logger: Logger;
    plugins: PluginInterface;
    private fileResolvers;
    addFileResolver(fileResolver: FileResolver): void;
    /**
     * A list of diagnostics that are always added to the `getDiagnostics()` call.
     */
    private staticDiagnostics;
    addDiagnostic(filePathAbsolute: string, diagnostic: Partial<BsDiagnostic>): void;
    getDiagnostics(): BsDiagnostic[];
    run(options: BsConfig): Promise<void>;
    protected createProgram(): Program;
    protected loadPlugins(): void;
    private clearConsole;
    enableWatchMode(): void;
    /**
     * The rootDir for this program.
     */
    get rootDir(): string;
    /**
     * A method that is used to cancel a previous run task.
     * Does nothing if previous run has completed or was already canceled
     */
    private cancelLastRun;
    /**
     * Run the entire process exactly one time.
     */
    private runOnce;
    private printDiagnostics;
    /**
     * Run the process once, allowing cancelability.
     * NOTE: This should only be called by `runOnce`.
     * @param cancellationToken
     */
    private _runOnce;
    private createPackageIfEnabled;
    /**
     * Transpiles the entire program into the staging folder
     */
    transpile(): Promise<void>;
    private deployPackageIfEnabled;
    /**
     * Parse and load the AST for every file in the project
     */
    private loadAllFilesAST;
    /**
     * Remove all files from the program that are in the specified folder path
     * @param folderPathAbsolute
     */
    removeFilesInFolder(folderPathAbsolute: string): void;
    /**
     * Scan every file and resolve all variable references.
     * If no errors were encountered, return true. Otherwise return false.
     */
    private validateProject;
    dispose(): void;
}
