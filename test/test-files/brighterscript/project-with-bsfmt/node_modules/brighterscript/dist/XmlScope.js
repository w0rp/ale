"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XmlScope = void 0;
const Scope_1 = require("./Scope");
const DiagnosticMessages_1 = require("./DiagnosticMessages");
const util_1 = require("./util");
const reflection_1 = require("./astUtils/reflection");
class XmlScope extends Scope_1.Scope {
    constructor(xmlFile, program) {
        super(xmlFile.pkgPath, xmlFile.dependencyGraphKey, program);
        this.xmlFile = xmlFile;
        this.program = program;
    }
    /**
     * Get the parent scope of this scope. If we could find the scope for our parentComponent, use that.
     * Otherwise default to global scope
     */
    getParentScope() {
        return this.cache.getOrAdd('parentScope', () => {
            let scope;
            let parentComponentName = this.xmlFile.parentComponentName;
            if (parentComponentName) {
                scope = this.program.getComponentScope(parentComponentName);
            }
            if (scope) {
                return scope;
            }
            else {
                return this.program.globalScope;
            }
        });
    }
    validate() {
        if (this.isValidated === false) {
            super.validate();
            this.isValidated = false;
            //detect when the child imports a script that its ancestor also imports
            this.diagnosticDetectDuplicateAncestorScriptImports();
            this.isValidated = true;
        }
    }
    /**
     * Detect when a child has imported a script that an ancestor also imported
     */
    diagnosticDetectDuplicateAncestorScriptImports() {
        if (this.xmlFile.parentComponent) {
            //build a lookup of pkg paths -> FileReference so we can more easily look up collisions
            let parentScriptImports = this.xmlFile.getAncestorScriptTagImports();
            let lookup = {};
            for (let parentScriptImport of parentScriptImports) {
                //keep the first occurance of a pkgPath. Parent imports are first in the array
                if (!lookup[parentScriptImport.pkgPath]) {
                    lookup[parentScriptImport.pkgPath] = parentScriptImport;
                }
            }
            //add warning for every script tag that this file shares with an ancestor
            for (let scriptImport of this.xmlFile.scriptTagImports) {
                let ancestorScriptImport = lookup[scriptImport.pkgPath];
                if (ancestorScriptImport) {
                    let ancestorComponentName = ancestorScriptImport.sourceFile.componentName;
                    this.diagnostics.push(Object.assign({ file: this.xmlFile, range: scriptImport.filePathRange }, DiagnosticMessages_1.DiagnosticMessages.unnecessaryScriptImportInChildFromParent(ancestorComponentName)));
                }
            }
        }
    }
    /**
     * Get the list of files referenced by this scope that are actually loaded in the program.
     * This does not account for parent scope.
     */
    getFiles() {
        return this.cache.getOrAdd('files', () => {
            let result = [
                this.xmlFile
            ];
            let scriptPkgPaths = this.xmlFile.getAllDependencies();
            for (let scriptPkgPath of scriptPkgPaths) {
                let file = this.program.getFileByPkgPath(scriptPkgPath);
                if (file) {
                    result.push(file);
                }
            }
            return result;
        });
    }
    /**
     * Get the definition (where was this thing first defined) of the symbol under the position
     */
    getDefinition(file, position) {
        let results = [];
        //if the position is within the file's parent component name
        if (reflection_1.isXmlFile(file) &&
            file.parentComponent &&
            file.parentNameRange &&
            util_1.default.rangeContains(file.parentNameRange, position)) {
            results.push({
                range: util_1.default.createRange(0, 0, 0, 0),
                uri: util_1.default.pathToUri(file.parentComponent.pathAbsolute)
            });
        }
        return results;
    }
}
exports.XmlScope = XmlScope;
//# sourceMappingURL=XmlScope.js.map