import type { Position } from 'vscode-languageserver';
import { DiagnosticSeverity } from 'vscode-languageserver';
import type { TokenKind } from './lexer/TokenKind';
/**
 * An object that keeps track of all possible error messages.
 */
export declare let DiagnosticMessages: {
    genericParserMessage: (message: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    callToUnknownFunction: (name: string, scopeName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    mismatchArgumentCount: (expectedCount: number | string, actualCount: number) => {
        message: string;
        code: number;
        severity: 1;
    };
    duplicateFunctionImplementation: (functionName: string, scopeName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    referencedFileDoesNotExist: () => {
        message: string;
        code: number;
        severity: 1;
    };
    xmlComponentMissingComponentDeclaration: () => {
        message: string;
        code: number;
        severity: 1;
    };
    xmlComponentMissingNameAttribute: () => {
        message: string;
        code: number;
        severity: 1;
    };
    xmlComponentMissingExtendsAttribute: () => {
        message: string;
        code: number;
        severity: 2;
    };
    xmlGenericParseError: (message: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    unnecessaryScriptImportInChildFromParent: (parentComponentName: string) => {
        message: string;
        code: number;
        severity: 2;
    };
    overridesAncestorFunction: (callableName: string, currentScopeName: string, parentFilePath: string, parentScopeName: string) => {
        message: string;
        code: number;
        severity: 4;
    };
    localVarFunctionShadowsParentFunction: (scopeName: 'stdlib' | 'scope') => {
        message: string;
        code: number;
        severity: 2;
    };
    scriptImportCaseMismatch: (correctFilePath: string) => {
        message: string;
        code: number;
        severity: 2;
    };
    fileNotReferencedByAnyOtherFile: () => {
        message: string;
        code: number;
        severity: 2;
    };
    unknownDiagnosticCode: (theUnknownCode: number) => {
        message: string;
        code: number;
        severity: 2;
    };
    scriptSrcCannotBeEmpty: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedIdentifierAfterKeyword: (keywordText: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    missingCallableKeyword: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedValidTypeToFollowAsKeyword: () => {
        message: string;
        code: number;
        severity: 1;
    };
    bsFeatureNotSupportedInBrsFiles: (featureName: any) => {
        message: string;
        code: number;
        severity: 1;
    };
    brsConfigJsonIsDeprecated: () => {
        message: string;
        code: number;
        severity: 2;
    };
    bsConfigJsonHasSyntaxErrors: (message: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    namespacedClassCannotShareNamewithNonNamespacedClass: (nonNamespacedClassName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    cannotUseOverrideKeywordOnConstructorFunction: () => {
        message: string;
        code: number;
        severity: 1;
    };
    importStatementMustBeDeclaredAtTopOfFile: () => {
        message: string;
        code: number;
        severity: 1;
    };
    methodDoesNotExistOnType: (methodName: string, className: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    duplicateIdentifier: (memberName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    missingOverrideKeyword: (ancestorClassName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    duplicateClassDeclaration: (scopeName: string, className: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    classCouldNotBeFound: (className: string, scopeName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedClassFieldIdentifier: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expressionIsNotConstructable: (expressionType: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedClassKeyword: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedLeftParenAfterCallable: (callableType: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNameAfterCallableKeyword: (callableType: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedLeftParenAfterCallableName: (callableType: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    tooManyCallableParameters: (actual: number, max: number) => {
        message: string;
        code: number;
        severity: 1;
    };
    invalidFunctionReturnType: (typeText: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    requiredParameterMayNotFollowOptionalParameter: (parameterName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineOrColonAfterCallableSignature: (callableType: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    functionNameCannotEndWithTypeDesignator: (callableType: string, name: string, designator: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    callableBlockMissingEndKeyword: (callableType: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    mismatchedEndCallableKeyword: (expectedCallableType: string, actualCallableType: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedParameterNameButFound: (text: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    functionParameterTypeIsInvalid: (parameterName: string, typeText: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    cannotUseReservedWordAsIdentifier: (name: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedOperatorAfterIdentifier: (operators: TokenKind[], name: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineOrColonAfterAssignment: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineAfterWhileCondition: () => {
        message: string;
        code: number;
        severity: 1;
    };
    couldNotFindMatchingEndKeyword: (keyword: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineAfterExitWhile: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedEndForOrNextToTerminateForLoop: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedInAfterForEach: (name: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedExpressionAfterForEachIn: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineAfterExitFor: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedStringLiteralAfterKeyword: (keyword: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    keywordMustBeDeclaredAtRootLevel: (keyword: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    libraryStatementMustBeDeclaredAtTopOfFile: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedEndIfElseIfOrElseToTerminateThenBlock: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedColonToPreceedEndIf: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedEndIfToCloseIfStatement: (startingPosition: Position) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedStatementToFollowConditionalCondition: (conditionType: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedStatementToFollowElse: () => {
        message: string;
        code: number;
        severity: 1;
    };
    consecutiveIncrementDecrementOperatorsAreNotAllowed: () => {
        message: string;
        code: number;
        severity: 1;
    };
    incrementDecrementOperatorsAreNotAllowedAsResultOfFunctionCall: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineOrColonAfterExpressionStatement: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedStatementOrFunctionCallButReceivedExpression: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineOrColonAfterIndexedSetStatement: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineOrColonAfterDottedSetStatement: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedNewlineOrColonAfterPrintedValues: () => {
        message: string;
        code: number;
        severity: 1;
    };
    labelsMustBeDeclaredOnTheirOwnLine: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedLabelIdentifierAfterGotoKeyword: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedRightSquareBraceAfterArrayOrObjectIndex: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedPropertyNameAfterPeriod: () => {
        message: string;
        code: number;
        severity: 1;
    };
    tooManyCallableArguments: (actual: number, max: number) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedRightParenAfterFunctionCallArguments: () => {
        message: string;
        code: number;
        severity: 1;
    };
    unmatchedLeftParenAfterExpression: () => {
        message: string;
        code: number;
        severity: 1;
    };
    unmatchedLeftSquareBraceAfterArrayLiteral: () => {
        message: string;
        code: number;
        severity: 1;
    };
    unexpectedAAKey: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedColonBetweenAAKeyAndvalue: () => {
        message: string;
        code: number;
        severity: 1;
    };
    unmatchedLeftCurlyAfterAALiteral: () => {
        message: string;
        code: number;
        severity: 1;
    };
    foundUnexpectedToken: (text: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    /**
     * Used in the lexer anytime we encounter an unsupported character
     */
    unexpectedCharacter: (text: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    unterminatedStringAtEndOfLine: () => {
        message: string;
        code: number;
        severity: 1;
    };
    unterminatedStringAtEndOfFile: () => {
        message: string;
        code: number;
        severity: 1;
    };
    fractionalHexLiteralsAreNotSupported: () => {
        message: string;
        code: number;
        severity: 1;
    };
    unexpectedConditionalCompilationString: () => {
        message: string;
        code: number;
        severity: 1;
    };
    duplicateConstDeclaration: (name: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    constAliasDoesNotExist: (name: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    invalidHashConstValue: () => {
        message: string;
        code: number;
        severity: 1;
    };
    referencedConstDoesNotExist: () => {
        message: string;
        code: number;
        severity: 1;
    };
    invalidHashIfValue: () => {
        message: string;
        code: number;
        severity: 1;
    };
    hashError: (message: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedEqualAfterConstName: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedHashElseIfToCloseHashIf: (startingLine: number) => {
        message: string;
        code: number;
        severity: 1;
    };
    constNameCannotBeReservedWord: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedIdentifier: () => {
        message: string;
        code: number;
        severity: 1;
    };
    expectedAttributeNameAfterAtSymbol: () => {
        message: string;
        code: number;
        severity: 1;
    };
    memberAlreadyExistsInParentClass: (memberType: string, parentClassName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    classChildMemberDifferentMemberTypeThanAncestor: (memberType: string, parentMemberType: string, parentClassName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    classConstructorMissingSuperCall: () => {
        message: string;
        code: number;
        severity: 1;
    };
    classConstructorIllegalUseOfMBeforeSuperCall: () => {
        message: string;
        code: number;
        severity: 1;
    };
    classFieldCannotBeOverridden: () => {
        message: string;
        code: number;
        severity: 1;
    };
    autoImportComponentScriptCollision: () => {
        message: string;
        code: number;
        severity: 2;
    };
    localVarShadowedByScopedFunction: () => {
        message: string;
        code: number;
        severity: 1;
    };
    scopeFunctionShadowedByBuiltInFunction: () => {
        message: string;
        code: number;
        severity: 1;
    };
    localVarSameNameAsClass: (className: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    unnecessaryCodebehindScriptImport: () => {
        message: string;
        code: number;
        severity: 2;
    };
    expectedOpenParenToFollowCallfuncIdentifier: () => {
        message: string;
        code: number;
        severity: 1;
    };
    callfuncExpressionMustHaveAtLeastOneArgument: () => {
        message: string;
        code: number;
        severity: 1;
    };
    parameterMayNotHaveSameNameAsNamespace: (paramName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    variableMayNotHaveSameNameAsNamespace: (variableName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    unterminatedTemplateStringAtEndOfFile: () => {
        message: string;
        code: number;
        severity: 1;
    };
    unterminatedTemplateExpression: () => {
        message: string;
        code: number;
        severity: 1;
    };
    duplicateComponentName: (componentName: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    functionCannotHaveSameNameAsClass: (className: string) => {
        message: string;
        code: number;
        severity: 1;
    };
    missingExceptionVarToFollowCatch: () => {
        message: string;
        code: number;
        severity: 1;
    };
    missingExceptionExpressionAfterThrowKeyword: () => {
        message: string;
        code: number;
        severity: 1;
    };
};
export declare let diagnosticCodes: number[];
export interface DiagnosticInfo {
    message: string;
    code: number;
    severity: DiagnosticSeverity;
}
