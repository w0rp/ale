import type { Range } from 'vscode-languageserver';
import type { Token } from '../lexer/Token';
import { TokenKind } from '../lexer/TokenKind';
import type { Expression, NamespacedVariableNameExpression } from '../parser/Expression';
import { LiteralExpression, CallExpression, DottedGetExpression, VariableExpression } from '../parser/Expression';
/**
 * A range that points to nowhere. Used to give non-null ranges to programmatically-added source code.
 * (Hardcoded range to prevent circular dependency issue in `../util.ts`
 */
export declare const interpolatedRange: Range;
export declare function createToken<T extends TokenKind>(kind: T, text?: string, range?: Range): Token & {
    kind: T;
};
export declare function createIdentifier(ident: string, range?: Range, namespaceName?: NamespacedVariableNameExpression): VariableExpression;
export declare function createDottedIdentifier(path: string[], range?: Range, namespaceName?: NamespacedVariableNameExpression): DottedGetExpression;
export declare function createStringLiteral(value: string, range?: Range): LiteralExpression;
export declare function createIntegerLiteral(value: string, range?: Range): LiteralExpression;
export declare function createFloatLiteral(value: string, range?: Range): LiteralExpression;
export declare function createInvalidLiteral(value?: string, range?: Range): LiteralExpression;
export declare function createBooleanLiteral(value: 'true' | 'false', range?: Range): LiteralExpression;
export declare function createCall(callee: Expression, args?: Expression[], namespaceName?: NamespacedVariableNameExpression): CallExpression;
