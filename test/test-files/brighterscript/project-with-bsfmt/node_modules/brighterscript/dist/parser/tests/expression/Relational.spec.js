"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Parser_1 = require("../../Parser");
const lexer_1 = require("../../../lexer");
const Parser_spec_1 = require("../Parser.spec");
describe('parser', () => {
    describe('relational expressions', () => {
        it('parses less-than expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.identifier('_'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.Less, '<'),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '2'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.be.length.greaterThan(0);
        });
        it('parses less-than-or-equal-to expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.identifier('_'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.LessEqual, '<='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '2'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.be.length.greaterThan(0);
        });
        it('parses greater-than expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.identifier('_'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.Greater, '>'),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '2'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.be.length.greaterThan(0);
        });
        it('parses greater-than-or-equal-to expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.identifier('_'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.GreaterEqual, '>='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '2'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.be.length.greaterThan(0);
        });
        it('parses equality expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.identifier('_'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '2'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.be.length.greaterThan(0);
        });
        it('parses inequality expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.identifier('_'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.LessGreater, '<>'),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '2'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.be.length.greaterThan(0);
        });
    });
});
//# sourceMappingURL=Relational.spec.js.map