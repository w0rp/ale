"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranspileState = void 0;
const source_map_1 = require("source-map");
/**
 * Holds the state of a transpile operation as it works its way through the transpile process
 */
class TranspileState {
    constructor(file) {
        /**
         * The number of active parent blocks for the current location of the state.
         */
        this.blockDepth = 0;
        /**
         * the tree of parents, with the first index being direct parent, and the last index being the furthest removed ancestor.
         * Used to assist blocks in knowing when to add a comment statement to the same line as the first line of the parent
         */
        this.lineage = [];
        this.file = file;
        //if a sourceRoot is specified, use that instead of the rootDir
        if (this.file.program.options.sourceRoot) {
            this.pathAbsolute = this.file.pathAbsolute.replace(this.file.program.options.rootDir, this.file.program.options.sourceRoot);
        }
        else {
            this.pathAbsolute = this.file.pathAbsolute;
        }
    }
    /**
     * Append whitespace until we reach the current blockDepth amount
     * @param blockDepthChange - if provided, change the block depth before indenting
     */
    indent(blockDepthChange = 0) {
        this.blockDepth += blockDepthChange;
        let totalSpaceCount = this.blockDepth * 4;
        totalSpaceCount = totalSpaceCount > -1 ? totalSpaceCount : 0;
        return ' '.repeat(totalSpaceCount);
    }
    newline() {
        return '\n';
    }
    /**
     * Shorthand for creating a new source node
     */
    sourceNode(locatable, code) {
        let result = new source_map_1.SourceNode(locatable.range.start.line, locatable.range.start.character, this.pathAbsolute, code);
        return code || result;
    }
}
exports.TranspileState = TranspileState;
//# sourceMappingURL=TranspileState.js.map