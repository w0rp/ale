"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThrowStatement = exports.TryCatchStatement = exports.ClassFieldStatement = exports.ClassMethodStatement = exports.ClassStatement = exports.ImportStatement = exports.NamespaceStatement = exports.LibraryStatement = exports.IndexedSetStatement = exports.DottedSetStatement = exports.WhileStatement = exports.ForEachStatement = exports.ForStatement = exports.StopStatement = exports.EndStatement = exports.ReturnStatement = exports.LabelStatement = exports.GotoStatement = exports.PrintStatement = exports.IncrementStatement = exports.IfStatement = exports.FunctionStatement = exports.ExitWhileStatement = exports.ExitForStatement = exports.CommentStatement = exports.ExpressionStatement = exports.Block = exports.AssignmentStatement = exports.Body = exports.EmptyStatement = exports.Statement = void 0;
const lexer_1 = require("../lexer");
const source_map_1 = require("source-map");
const Expression_1 = require("./Expression");
const util_1 = require("../util");
const vscode_languageserver_1 = require("vscode-languageserver");
const Parser_1 = require("./Parser");
const visitors_1 = require("../astUtils/visitors");
const reflection_1 = require("../astUtils/reflection");
const creators_1 = require("../astUtils/creators");
const DynamicType_1 = require("../types/DynamicType");
/**
 * A BrightScript statement
 */
class Statement {
    constructor() {
        /**
         * When being considered by the walk visitor, this describes what type of element the current class is.
         */
        this.visitMode = visitors_1.InternalWalkMode.visitStatements;
    }
}
exports.Statement = Statement;
class EmptyStatement extends Statement {
    constructor(
    /**
     * Create a negative range to indicate this is an interpolated location
     */
    range = creators_1.interpolatedRange) {
        super();
        this.range = range;
    }
    transpile(state) {
        return [];
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.EmptyStatement = EmptyStatement;
/**
 * This is a top-level statement. Consider this the root of the AST
 */
class Body extends Statement {
    constructor(statements = []) {
        super();
        this.statements = statements;
    }
    get range() {
        var _a, _b, _c, _d;
        return util_1.util.createRangeFromPositions((_b = (_a = this.statements[0]) === null || _a === void 0 ? void 0 : _a.range.start) !== null && _b !== void 0 ? _b : vscode_languageserver_1.Position.create(0, 0), (_d = (_c = this.statements[this.statements.length - 1]) === null || _c === void 0 ? void 0 : _c.range.end) !== null && _d !== void 0 ? _d : vscode_languageserver_1.Position.create(0, 0));
    }
    transpile(state) {
        let result = [];
        for (let i = 0; i < this.statements.length; i++) {
            let statement = this.statements[i];
            let previousStatement = this.statements[i - 1];
            let nextStatement = this.statements[i + 1];
            if (!previousStatement) {
                //this is the first statement. do nothing related to spacing and newlines
                //if comment is on same line as prior sibling
            }
            else if (reflection_1.isCommentStatement(statement) && previousStatement && statement.range.start.line === previousStatement.range.end.line) {
                result.push(' ');
                //add double newline if this is a comment, and next is a function
            }
            else if (reflection_1.isCommentStatement(statement) && nextStatement && reflection_1.isFunctionStatement(nextStatement)) {
                result.push('\n\n');
                //add double newline if is function not preceeded by a comment
            }
            else if (reflection_1.isFunctionStatement(statement) && previousStatement && !(reflection_1.isCommentStatement(previousStatement))) {
                result.push('\n\n');
            }
            else {
                //separate statements by a single newline
                result.push('\n');
            }
            result.push(...statement.transpile(state));
        }
        return result;
    }
    getTypedef(state) {
        let result = [];
        for (const statement of this.statements) {
            //if the current statement supports generating typedef, call it
            if ('getTypedef' in statement) {
                result.push(...statement.getTypedef(state), state.newline());
            }
        }
        return result;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            for (let i = 0; i < this.statements.length; i++) {
                visitors_1.walk(this.statements, i, visitor, options, this);
            }
        }
    }
}
exports.Body = Body;
class AssignmentStatement extends Statement {
    constructor(equals, name, value, containingFunction) {
        super();
        this.equals = equals;
        this.name = name;
        this.value = value;
        this.containingFunction = containingFunction;
        this.range = util_1.util.createRangeFromPositions(this.name.range.start, this.value.range.end);
    }
    transpile(state) {
        var _a, _b;
        //if the value is a compound assignment, just transpile the expression itself
        if (lexer_1.CompoundAssignmentOperators.includes((_b = (_a = this.value) === null || _a === void 0 ? void 0 : _a.operator) === null || _b === void 0 ? void 0 : _b.kind)) {
            return this.value.transpile(state);
        }
        else {
            return [
                new source_map_1.SourceNode(this.name.range.start.line + 1, this.name.range.start.character, state.pathAbsolute, this.name.text),
                ' ',
                new source_map_1.SourceNode(this.equals.range.start.line + 1, this.equals.range.start.character, state.pathAbsolute, '='),
                ' ',
                ...this.value.transpile(state)
            ];
        }
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'value', visitor, options);
        }
    }
}
exports.AssignmentStatement = AssignmentStatement;
class Block extends Statement {
    constructor(statements, startingRange) {
        super();
        this.statements = statements;
        this.startingRange = startingRange;
        this.range = util_1.util.createRangeFromPositions(this.startingRange.start, this.statements.length
            ? this.statements[this.statements.length - 1].range.end
            : this.startingRange.start);
    }
    transpile(state) {
        state.blockDepth++;
        let results = [];
        for (let i = 0; i < this.statements.length; i++) {
            let previousStatement = this.statements[i - 1];
            let statement = this.statements[i];
            //if comment is on same line as parent
            if (reflection_1.isCommentStatement(statement) &&
                (util_1.util.linesTouch(state.lineage[0], statement) || util_1.util.linesTouch(previousStatement, statement))) {
                results.push(' ');
                //is not a comment
            }
            else {
                //add a newline and indent
                results.push(state.newline(), state.indent());
            }
            //push block onto parent list
            state.lineage.unshift(this);
            results.push(...statement.transpile(state));
            state.lineage.shift();
        }
        state.blockDepth--;
        return results;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            for (let i = 0; i < this.statements.length; i++) {
                visitors_1.walk(this.statements, i, visitor, options, this);
            }
        }
    }
}
exports.Block = Block;
class ExpressionStatement extends Statement {
    constructor(expression) {
        super();
        this.expression = expression;
        this.range = this.expression.range;
    }
    transpile(state) {
        return this.expression.transpile(state);
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'expression', visitor, options);
        }
    }
}
exports.ExpressionStatement = ExpressionStatement;
class CommentStatement extends Statement {
    constructor(comments) {
        var _a;
        super();
        this.comments = comments;
        this.visitMode = visitors_1.InternalWalkMode.visitStatements | visitors_1.InternalWalkMode.visitExpressions;
        if (((_a = this.comments) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            this.range = util_1.util.createRangeFromPositions(this.comments[0].range.start, this.comments[this.comments.length - 1].range.end);
        }
    }
    get text() {
        return this.comments.map(x => x.text).join('\n');
    }
    transpile(state) {
        let result = [];
        for (let i = 0; i < this.comments.length; i++) {
            let comment = this.comments[i];
            if (i > 0) {
                result.push(state.indent());
            }
            result.push(new source_map_1.SourceNode(comment.range.start.line + 1, comment.range.start.character, state.pathAbsolute, comment.text));
            //add newline for all except final comment
            if (i < this.comments.length - 1) {
                result.push('\n');
            }
        }
        return result;
    }
    getTypedef(state) {
        return this.transpile(state);
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.CommentStatement = CommentStatement;
class ExitForStatement extends Statement {
    constructor(tokens) {
        super();
        this.tokens = tokens;
        this.range = this.tokens.exitFor.range;
    }
    transpile(state) {
        return [
            new source_map_1.SourceNode(this.tokens.exitFor.range.start.line + 1, this.tokens.exitFor.range.start.character, state.pathAbsolute, 'exit for')
        ];
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.ExitForStatement = ExitForStatement;
class ExitWhileStatement extends Statement {
    constructor(tokens) {
        super();
        this.tokens = tokens;
        this.range = this.tokens.exitWhile.range;
    }
    transpile(state) {
        return [
            new source_map_1.SourceNode(this.tokens.exitWhile.range.start.line + 1, this.tokens.exitWhile.range.start.character, state.pathAbsolute, 'exit while')
        ];
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.ExitWhileStatement = ExitWhileStatement;
class FunctionStatement extends Statement {
    constructor(name, func, namespaceName) {
        super();
        this.name = name;
        this.func = func;
        this.namespaceName = namespaceName;
        this.range = this.func.range;
    }
    /**
     * Get the name of this expression based on the parse mode
     */
    getName(parseMode) {
        if (this.namespaceName) {
            let delimiter = parseMode === Parser_1.ParseMode.BrighterScript ? '.' : '_';
            let namespaceName = this.namespaceName.getName(parseMode);
            return namespaceName + delimiter + this.name.text;
        }
        else {
            return this.name.text;
        }
    }
    transpile(state) {
        //create a fake token using the full transpiled name
        let nameToken = Object.assign(Object.assign({}, this.name), { text: this.getName(Parser_1.ParseMode.BrightScript) });
        return this.func.transpile(state, nameToken);
    }
    getTypedef(state) {
        return this.func.getTypedef(state, this.name);
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'func', visitor, options);
        }
    }
}
exports.FunctionStatement = FunctionStatement;
class IfStatement extends Statement {
    constructor(tokens, condition, thenBranch, elseIfs, elseBranch) {
        var _a, _b, _c, _d, _e, _f;
        super();
        this.tokens = tokens;
        this.condition = condition;
        this.thenBranch = thenBranch;
        this.elseIfs = elseIfs;
        this.elseBranch = elseBranch;
        this.range = util_1.util.createRangeFromPositions(this.tokens.if.range.start, ((_f = (_b = (_a = this.tokens.endIf) !== null && _a !== void 0 ? _a : this.elseBranch) !== null && _b !== void 0 ? _b : (_e = (_c = this.elseIfs) === null || _c === void 0 ? void 0 : _c[((_d = this.elseIfs) === null || _d === void 0 ? void 0 : _d.length) - 1]) === null || _e === void 0 ? void 0 : _e.thenBranch) !== null && _f !== void 0 ? _f : this.thenBranch).range.end);
    }
    transpile(state) {
        let results = [];
        //if   (already indented by block)
        results.push(new source_map_1.SourceNode(this.tokens.if.range.start.line + 1, this.tokens.if.range.start.character, state.pathAbsolute, 'if'));
        results.push(' ');
        //conditions
        results.push(...this.condition.transpile(state));
        results.push(' ');
        //then
        if (this.tokens.then) {
            results.push(new source_map_1.SourceNode(this.tokens.then.range.start.line + 1, this.tokens.then.range.start.character, state.pathAbsolute, 'then'));
        }
        else {
            results.push('then');
        }
        state.lineage.unshift(this);
        //if statement body
        let thenNodes = this.thenBranch.transpile(state);
        state.lineage.shift();
        if (thenNodes.length > 0) {
            results.push(thenNodes);
        }
        results.push('\n');
        //else if blocks
        for (let elseif of this.elseIfs) {
            //elseif
            results.push(state.indent(), new source_map_1.SourceNode(elseif.elseIfToken.range.start.line + 1, elseif.elseIfToken.range.start.character, state.pathAbsolute, 'else if'), ' ');
            //condition
            results.push(...elseif.condition.transpile(state));
            //then
            results.push(' ');
            if (elseif.thenToken) {
                results.push(new source_map_1.SourceNode(elseif.thenToken.range.start.line + 1, elseif.thenToken.range.start.character, state.pathAbsolute, 'then'));
            }
            else {
                results.push('then');
            }
            //then body
            state.lineage.unshift(elseif.thenBranch);
            let body = elseif.thenBranch.transpile(state);
            state.lineage.shift();
            if (body.length > 0) {
                results.push(...body);
            }
            results.push('\n');
        }
        //else branch
        if (this.tokens.else) {
            //else
            results.push(state.indent(), new source_map_1.SourceNode(this.tokens.else.range.start.line + 1, this.tokens.else.range.start.character, state.pathAbsolute, 'else'));
            //then body
            state.lineage.unshift(this.elseBranch);
            let body = this.elseBranch.transpile(state);
            state.lineage.shift();
            if (body.length > 0) {
                results.push(...body);
            }
            results.push('\n');
        }
        //end if
        results.push(state.indent());
        if (this.tokens.endIf) {
            results.push(new source_map_1.SourceNode(this.tokens.endIf.range.start.line + 1, this.tokens.endIf.range.start.character, state.pathAbsolute, 'end if'));
        }
        else {
            results.push('end if');
        }
        return results;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'condition', visitor, options);
        }
        if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            visitors_1.walk(this, 'thenBranch', visitor, options);
        }
        for (let i = 0; i < this.elseIfs.length; i++) {
            if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
                visitors_1.walk(this.elseIfs[i], 'condition', visitor, options, this);
            }
            if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
                visitors_1.walk(this.elseIfs[i], 'thenBranch', visitor, options, this);
            }
        }
        if (this.elseBranch && options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            visitors_1.walk(this, 'elseBranch', visitor, options);
        }
    }
}
exports.IfStatement = IfStatement;
class IncrementStatement extends Statement {
    constructor(value, operator) {
        super();
        this.value = value;
        this.operator = operator;
        this.range = util_1.util.createRangeFromPositions(this.value.range.start, this.operator.range.end);
    }
    transpile(state) {
        return [
            ...this.value.transpile(state),
            new source_map_1.SourceNode(this.operator.range.start.line + 1, this.operator.range.start.character, state.pathAbsolute, this.operator.text)
        ];
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'value', visitor, options);
        }
    }
}
exports.IncrementStatement = IncrementStatement;
/**
 * Represents a `print` statement within BrightScript.
 */
class PrintStatement extends Statement {
    /**
     * Creates a new internal representation of a BrightScript `print` statement.
     * @param expressions an array of expressions or `PrintSeparator`s to be
     *                    evaluated and printed.
     */
    constructor(tokens, expressions) {
        super();
        this.tokens = tokens;
        this.expressions = expressions;
        this.range = util_1.util.createRangeFromPositions(this.tokens.print.range.start, this.expressions.length
            ? this.expressions[this.expressions.length - 1].range.end
            : this.tokens.print.range.end);
    }
    transpile(state) {
        let result = [
            new source_map_1.SourceNode(this.tokens.print.range.start.line + 1, this.tokens.print.range.start.character, state.pathAbsolute, 'print'),
            ' '
        ];
        for (let i = 0; i < this.expressions.length; i++) {
            let expression = this.expressions[i];
            if (expression.transpile) {
                //separate print statements with a semi-colon
                if (i > 0) {
                    result.push(' ; ');
                }
                result.push(...expression.transpile(state));
            }
            else {
                //skip these because I think they are bogus items only added for use in the runtime
            }
        }
        return result;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            for (let i = 0; i < this.expressions.length; i++) {
                //sometimes we have semicolon `Token`s in the expressions list (should probably fix that...), so only emit the actual expressions
                if (reflection_1.isExpression(this.expressions[i])) {
                    visitors_1.walk(this.expressions, i, visitor, options, this);
                }
            }
        }
    }
}
exports.PrintStatement = PrintStatement;
class GotoStatement extends Statement {
    constructor(tokens) {
        super();
        this.tokens = tokens;
        this.range = util_1.util.createRangeFromPositions(this.tokens.goto.range.start, this.tokens.label.range.end);
    }
    transpile(state) {
        return [
            new source_map_1.SourceNode(this.tokens.goto.range.start.line + 1, this.tokens.goto.range.start.character, state.pathAbsolute, 'goto'),
            ' ',
            new source_map_1.SourceNode(this.tokens.label.range.start.line + 1, this.tokens.label.range.start.character, state.pathAbsolute, this.tokens.label.text)
        ];
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.GotoStatement = GotoStatement;
class LabelStatement extends Statement {
    constructor(tokens) {
        super();
        this.tokens = tokens;
        this.range = util_1.util.createRangeFromPositions(this.tokens.identifier.range.start, this.tokens.colon.range.end);
    }
    transpile(state) {
        return [
            new source_map_1.SourceNode(this.tokens.identifier.range.start.line + 1, this.tokens.identifier.range.start.character, state.pathAbsolute, this.tokens.identifier.text),
            new source_map_1.SourceNode(this.tokens.colon.range.start.line + 1, this.tokens.colon.range.start.character, state.pathAbsolute, ':')
        ];
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.LabelStatement = LabelStatement;
class ReturnStatement extends Statement {
    constructor(tokens, value) {
        var _a;
        super();
        this.tokens = tokens;
        this.value = value;
        this.range = util_1.util.createRangeFromPositions(this.tokens.return.range.start, ((_a = this.value) === null || _a === void 0 ? void 0 : _a.range.end) || this.tokens.return.range.end);
    }
    transpile(state) {
        let result = [];
        result.push(new source_map_1.SourceNode(this.tokens.return.range.start.line + 1, this.tokens.return.range.start.character, state.pathAbsolute, 'return'));
        if (this.value) {
            result.push(' ');
            result.push(...this.value.transpile(state));
        }
        return result;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'value', visitor, options);
        }
    }
}
exports.ReturnStatement = ReturnStatement;
class EndStatement extends Statement {
    constructor(tokens) {
        super();
        this.tokens = tokens;
        this.range = util_1.util.createRangeFromPositions(this.tokens.end.range.start, this.tokens.end.range.end);
    }
    transpile(state) {
        return [
            new source_map_1.SourceNode(this.tokens.end.range.start.line + 1, this.tokens.end.range.start.character, state.pathAbsolute, 'end')
        ];
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.EndStatement = EndStatement;
class StopStatement extends Statement {
    constructor(tokens) {
        super();
        this.tokens = tokens;
        this.range = util_1.util.createRangeFromPositions(this.tokens.stop.range.start, this.tokens.stop.range.end);
    }
    transpile(state) {
        return [
            new source_map_1.SourceNode(this.tokens.stop.range.start.line + 1, this.tokens.stop.range.start.character, state.pathAbsolute, 'stop')
        ];
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.StopStatement = StopStatement;
class ForStatement extends Statement {
    constructor(forToken, counterDeclaration, toToken, finalValue, body, endForToken, stepToken, increment) {
        super();
        this.forToken = forToken;
        this.counterDeclaration = counterDeclaration;
        this.toToken = toToken;
        this.finalValue = finalValue;
        this.body = body;
        this.endForToken = endForToken;
        this.stepToken = stepToken;
        this.increment = increment;
        this.range = util_1.util.createRangeFromPositions(this.forToken.range.start, this.endForToken.range.end);
    }
    transpile(state) {
        let result = [];
        //for
        result.push(new source_map_1.SourceNode(this.forToken.range.start.line + 1, this.forToken.range.start.character, state.pathAbsolute, 'for'), ' ');
        //i=1
        result.push(...this.counterDeclaration.transpile(state), ' ');
        //to
        result.push(new source_map_1.SourceNode(this.toToken.range.start.line + 1, this.toToken.range.start.character, state.pathAbsolute, 'to'), ' ');
        //final value
        result.push(this.finalValue.transpile(state));
        //step
        if (this.stepToken) {
            result.push(' ', new source_map_1.SourceNode(this.stepToken.range.start.line + 1, this.stepToken.range.start.character, state.pathAbsolute, 'step'), ' ', this.increment.transpile(state));
        }
        //loop body
        state.lineage.unshift(this);
        result.push(...this.body.transpile(state));
        state.lineage.shift();
        if (this.body.statements.length > 0) {
            result.push('\n');
        }
        //end for
        result.push(state.indent(), new source_map_1.SourceNode(this.endForToken.range.start.line + 1, this.endForToken.range.start.character, state.pathAbsolute, 'end for'));
        return result;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            visitors_1.walk(this, 'counterDeclaration', visitor, options);
        }
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'finalValue', visitor, options);
            visitors_1.walk(this, 'increment', visitor, options);
        }
        if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            visitors_1.walk(this, 'body', visitor, options);
        }
    }
}
exports.ForStatement = ForStatement;
class ForEachStatement extends Statement {
    constructor(tokens, item, target, body) {
        super();
        this.tokens = tokens;
        this.item = item;
        this.target = target;
        this.body = body;
        this.range = util_1.util.createRangeFromPositions(this.tokens.forEach.range.start, this.tokens.endFor.range.end);
    }
    transpile(state) {
        let result = [];
        //for each
        result.push(new source_map_1.SourceNode(this.tokens.forEach.range.start.line + 1, this.tokens.forEach.range.start.character, state.pathAbsolute, 'for each'), ' ');
        //item
        result.push(new source_map_1.SourceNode(this.tokens.forEach.range.start.line + 1, this.tokens.forEach.range.start.character, state.pathAbsolute, this.item.text), ' ');
        //in
        result.push(new source_map_1.SourceNode(this.tokens.in.range.start.line + 1, this.tokens.in.range.start.character, state.pathAbsolute, 'in'), ' ');
        //target
        result.push(...this.target.transpile(state));
        //body
        state.lineage.unshift(this);
        result.push(...this.body.transpile(state));
        state.lineage.shift();
        if (this.body.statements.length > 0) {
            result.push('\n');
        }
        //end for
        result.push(state.indent(), new source_map_1.SourceNode(this.tokens.endFor.range.start.line + 1, this.tokens.endFor.range.start.character, state.pathAbsolute, 'end for'));
        return result;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'target', visitor, options);
        }
        if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            visitors_1.walk(this, 'body', visitor, options);
        }
    }
}
exports.ForEachStatement = ForEachStatement;
class WhileStatement extends Statement {
    constructor(tokens, condition, body) {
        super();
        this.tokens = tokens;
        this.condition = condition;
        this.body = body;
        this.range = util_1.util.createRangeFromPositions(this.tokens.while.range.start, this.tokens.endWhile.range.end);
    }
    transpile(state) {
        let result = [];
        //while
        result.push(new source_map_1.SourceNode(this.tokens.while.range.start.line + 1, this.tokens.while.range.start.character, state.pathAbsolute, 'while'), ' ');
        //condition
        result.push(...this.condition.transpile(state));
        state.lineage.unshift(this);
        //body
        result.push(...this.body.transpile(state));
        state.lineage.shift();
        //trailing newline only if we have body statements
        result.push('\n');
        //end while
        result.push(state.indent(), new source_map_1.SourceNode(this.tokens.endWhile.range.start.line + 1, this.tokens.endWhile.range.start.character, state.pathAbsolute, 'end while'));
        return result;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'condition', visitor, options);
        }
        if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            visitors_1.walk(this, 'body', visitor, options);
        }
    }
}
exports.WhileStatement = WhileStatement;
class DottedSetStatement extends Statement {
    constructor(obj, name, value) {
        super();
        this.obj = obj;
        this.name = name;
        this.value = value;
        this.range = util_1.util.createRangeFromPositions(this.obj.range.start, this.value.range.end);
    }
    transpile(state) {
        var _a, _b;
        //if the value is a compound assignment, don't add the obj, dot, name, or operator...the expression will handle that
        if (lexer_1.CompoundAssignmentOperators.includes((_b = (_a = this.value) === null || _a === void 0 ? void 0 : _a.operator) === null || _b === void 0 ? void 0 : _b.kind)) {
            return this.value.transpile(state);
        }
        else {
            return [
                //object
                ...this.obj.transpile(state),
                '.',
                //name
                new source_map_1.SourceNode(this.name.range.start.line + 1, this.name.range.start.character, state.pathAbsolute, this.name.text),
                ' = ',
                //right-hand-side of assignment
                ...this.value.transpile(state)
            ];
        }
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'obj', visitor, options);
            visitors_1.walk(this, 'value', visitor, options);
        }
    }
}
exports.DottedSetStatement = DottedSetStatement;
class IndexedSetStatement extends Statement {
    constructor(obj, index, value, openingSquare, closingSquare) {
        super();
        this.obj = obj;
        this.index = index;
        this.value = value;
        this.openingSquare = openingSquare;
        this.closingSquare = closingSquare;
        this.range = util_1.util.createRangeFromPositions(this.obj.range.start, this.value.range.end);
    }
    transpile(state) {
        var _a, _b;
        //if the value is a component assignment, don't add the obj, index or operator...the expression will handle that
        if (lexer_1.CompoundAssignmentOperators.includes((_b = (_a = this.value) === null || _a === void 0 ? void 0 : _a.operator) === null || _b === void 0 ? void 0 : _b.kind)) {
            return this.value.transpile(state);
        }
        else {
            return [
                //obj
                ...this.obj.transpile(state),
                //   [
                new source_map_1.SourceNode(this.openingSquare.range.start.line + 1, this.openingSquare.range.start.character, state.pathAbsolute, '['),
                //    index
                ...this.index.transpile(state),
                //         ]
                new source_map_1.SourceNode(this.closingSquare.range.start.line + 1, this.closingSquare.range.start.character, state.pathAbsolute, ']'),
                //           =
                ' = ',
                //             value
                ...this.value.transpile(state)
            ];
        }
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'obj', visitor, options);
            visitors_1.walk(this, 'index', visitor, options);
            visitors_1.walk(this, 'value', visitor, options);
        }
    }
}
exports.IndexedSetStatement = IndexedSetStatement;
class LibraryStatement extends Statement {
    constructor(tokens) {
        super();
        this.tokens = tokens;
        this.range = util_1.util.createRangeFromPositions(this.tokens.library.range.start, this.tokens.filePath ? this.tokens.filePath.range.end : this.tokens.library.range.end);
    }
    transpile(state) {
        let result = [];
        result.push(new source_map_1.SourceNode(this.tokens.library.range.start.line + 1, this.tokens.library.range.start.character, state.pathAbsolute, 'library'));
        //there will be a parse error if file path is missing, but let's prevent a runtime error just in case
        if (this.tokens.filePath) {
            result.push(' ', new source_map_1.SourceNode(this.tokens.filePath.range.start.line + 1, this.tokens.filePath.range.start.character, state.pathAbsolute, this.tokens.filePath.text));
        }
        return result;
    }
    getTypedef(state) {
        return this.transpile(state);
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.LibraryStatement = LibraryStatement;
class NamespaceStatement extends Statement {
    constructor(keyword, 
    //this should technically only be a VariableExpression or DottedGetExpression, but that can be enforced elsewhere
    nameExpression, body, endKeyword) {
        super();
        this.keyword = keyword;
        this.nameExpression = nameExpression;
        this.body = body;
        this.endKeyword = endKeyword;
        this.name = this.nameExpression.getName(Parser_1.ParseMode.BrighterScript);
    }
    get range() {
        var _a, _b, _c;
        return util_1.util.createRangeFromPositions(this.keyword.range.start, ((_c = (_b = (_a = this.endKeyword) !== null && _a !== void 0 ? _a : this.body) !== null && _b !== void 0 ? _b : this.nameExpression) !== null && _c !== void 0 ? _c : this.keyword).range.end);
    }
    getName(parseMode) {
        return this.nameExpression.getName(parseMode);
    }
    transpile(state) {
        //namespaces don't actually have any real content, so just transpile their bodies
        return this.body.transpile(state);
    }
    getTypedef(state) {
        let result = [
            'namespace ',
            ...this.nameExpression.getName(Parser_1.ParseMode.BrighterScript),
            state.newline()
        ];
        state.blockDepth++;
        result.push(state.indent(), ...this.body.getTypedef(state));
        state.blockDepth--;
        result.push('end namespace');
        return result;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'nameExpression', visitor, options);
        }
        if (this.body.statements.length > 0 && options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            visitors_1.walk(this, 'body', visitor, options);
        }
    }
}
exports.NamespaceStatement = NamespaceStatement;
class ImportStatement extends Statement {
    constructor(importToken, filePathToken) {
        super();
        this.importToken = importToken;
        this.filePathToken = filePathToken;
        this.range = util_1.util.createRangeFromPositions(importToken.range.start, (filePathToken !== null && filePathToken !== void 0 ? filePathToken : importToken).range.end);
        if (this.filePathToken) {
            //remove quotes
            this.filePath = this.filePathToken.text.replace(/"/g, '');
            //adjust the range to exclude the quotes
            this.filePathToken.range = util_1.util.createRange(this.filePathToken.range.start.line, this.filePathToken.range.start.character + 1, this.filePathToken.range.end.line, this.filePathToken.range.end.character - 1);
        }
    }
    transpile(state) {
        //The xml files are responsible for adding the additional script imports, but
        //add the import statement as a comment just for debugging purposes
        return [
            new source_map_1.SourceNode(this.range.start.line + 1, this.range.start.character, state.file.pathAbsolute, `'${this.importToken.text} ${this.filePathToken.text}`)
        ];
    }
    /**
     * Get the typedef for this statement
     */
    getTypedef(state) {
        return [
            this.importToken.text,
            ' ',
            //replace any `.bs` extension with `.brs`
            this.filePathToken.text.replace(/\.bs"?$/i, '.brs"')
        ];
    }
    walk(visitor, options) {
        //nothing to walk
    }
}
exports.ImportStatement = ImportStatement;
class ClassStatement extends Statement {
    constructor(classKeyword, 
    /**
     * The name of the class (without namespace prefix)
     */
    name, body, end, extendsKeyword, parentClassName, namespaceName) {
        var _a, _b, _c;
        super();
        this.classKeyword = classKeyword;
        this.name = name;
        this.body = body;
        this.end = end;
        this.extendsKeyword = extendsKeyword;
        this.parentClassName = parentClassName;
        this.namespaceName = namespaceName;
        this.memberMap = {};
        this.methods = [];
        this.fields = [];
        this.body = (_a = this.body) !== null && _a !== void 0 ? _a : [];
        for (let statement of this.body) {
            if (reflection_1.isClassMethodStatement(statement)) {
                this.methods.push(statement);
                this.memberMap[(_b = statement === null || statement === void 0 ? void 0 : statement.name) === null || _b === void 0 ? void 0 : _b.text.toLowerCase()] = statement;
            }
            else if (reflection_1.isClassFieldStatement(statement)) {
                this.fields.push(statement);
                this.memberMap[(_c = statement === null || statement === void 0 ? void 0 : statement.name) === null || _c === void 0 ? void 0 : _c.text.toLowerCase()] = statement;
            }
        }
        this.range = util_1.util.createRangeFromPositions(this.classKeyword.range.start, this.end.range.end);
    }
    getName(parseMode) {
        var _a;
        const name = (_a = this.name) === null || _a === void 0 ? void 0 : _a.text;
        if (name) {
            if (this.namespaceName) {
                let namespaceName = this.namespaceName.getName(parseMode);
                let separator = parseMode === Parser_1.ParseMode.BrighterScript ? '.' : '_';
                return namespaceName + separator + name;
            }
            else {
                return name;
            }
        }
        else {
            //return undefined which will allow outside callers to know that this class doesn't have a name
            return undefined;
        }
    }
    transpile(state) {
        let result = [];
        //make the builder
        result.push(...this.getTranspiledBuilder(state));
        result.push('\n', state.indent());
        //make the class assembler (i.e. the public-facing class creator method)
        result.push(...this.getTranspiledClassFunction(state));
        return result;
    }
    getTypedef(state) {
        const result = [];
        result.push('class ', this.name.text);
        if (this.extendsKeyword && this.parentClassName) {
            result.push(` extends ${this.parentClassName.getName(Parser_1.ParseMode.BrighterScript)}`);
        }
        result.push(state.newline());
        state.blockDepth++;
        for (const member of this.body) {
            if ('getTypedef' in member) {
                result.push(state.indent(), ...member.getTypedef(state), state.newline());
            }
        }
        state.blockDepth--;
        result.push(state.indent(), 'end class');
        return result;
    }
    /**
     * Find the parent index for this class's parent.
     * For class inheritance, every class is given an index.
     * The base class is index 0, its child is index 1, and so on.
     */
    getParentClassIndex(state) {
        let myIndex = 0;
        let stmt = this;
        while (stmt) {
            if (stmt.parentClassName) {
                stmt = state.file.getClassByName(stmt.parentClassName.getName(Parser_1.ParseMode.BrighterScript));
                myIndex++;
            }
            else {
                break;
            }
        }
        return myIndex - 1;
    }
    hasParentClass() {
        return !!this.parentClassName;
    }
    /**
     * Get all ancestor classes, in closest-to-furthest order (i.e. 0 is parent, 1 is grandparent, etc...).
     * This will return an empty array if no ancestors were found
     */
    getAncestors(state) {
        var _a;
        let ancestors = [];
        let stmt = this;
        while (stmt) {
            if (stmt.parentClassName) {
                let fullyQualifiedClassName = util_1.util.getFullyQualifiedClassName(stmt.parentClassName.getName(Parser_1.ParseMode.BrighterScript), (_a = this.namespaceName) === null || _a === void 0 ? void 0 : _a.getName(Parser_1.ParseMode.BrighterScript));
                stmt = state.file.getClassByName(fullyQualifiedClassName);
                ancestors.push(stmt);
            }
            else {
                break;
            }
        }
        return ancestors;
    }
    getBuilderName(name) {
        if (name.includes('.')) {
            name = name.replace(/\./gi, '_');
        }
        return `__${name}_builder`;
    }
    /**
     * Get the constructor function for this class (if exists), or undefined if not exist
     */
    getConstructorFunction() {
        var _a, _b;
        for (let key in this.memberMap) {
            let member = this.memberMap[key];
            if (((_b = (_a = member.name) === null || _a === void 0 ? void 0 : _a.text) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'new') {
                return member;
            }
        }
    }
    getEmptyNewFunction() {
        let stmt = Parser_1.Parser.parse(`
            class UtilClass
                sub new()
                end sub
            end class
        `, { mode: Parser_1.ParseMode.BrighterScript }).statements[0].memberMap.new;
        //TODO make locations point to 0,0 (might not matter?)
        return stmt;
    }
    /**
     * Determine if the specified field was declared in one of the ancestor classes
     */
    isFieldDeclaredByAncestor(fieldName, ancestors) {
        let lowerFieldName = fieldName.toLowerCase();
        for (let ancestor of ancestors) {
            if (ancestor.memberMap[lowerFieldName]) {
                return true;
            }
        }
        return false;
    }
    /**
     * The builder is a function that assigns all of the methods and property names to a class instance.
     * This needs to be a separate function so that child classes can call the builder from their parent
     * without instantiating the parent constructor at that point in time.
     */
    getTranspiledBuilder(state) {
        var _a;
        let result = [];
        result.push(`function ${this.getBuilderName(this.getName(Parser_1.ParseMode.BrightScript))}()\n`);
        state.blockDepth++;
        //indent
        result.push(state.indent());
        /**
         * The lineage of this class. index 0 is a direct parent, index 1 is index 0's parent, etc...
         */
        let ancestors = this.getAncestors(state);
        //construct parent class or empty object
        if (ancestors[0]) {
            let fullyQualifiedClassName = util_1.util.getFullyQualifiedClassName(this.parentClassName.getName(Parser_1.ParseMode.BrighterScript), (_a = this.namespaceName) === null || _a === void 0 ? void 0 : _a.getName(Parser_1.ParseMode.BrighterScript));
            result.push('instance = ', this.getBuilderName(fullyQualifiedClassName), '()');
        }
        else {
            //use an empty object.
            result.push('instance = {}');
        }
        result.push(state.newline(), state.indent());
        let parentClassIndex = this.getParentClassIndex(state);
        //create empty `new` function if class is missing it (simplifies transpile logic)
        if (!this.getConstructorFunction()) {
            this.memberMap.new = this.getEmptyNewFunction();
            this.body = [this.memberMap.new, ...this.body];
        }
        for (let statement of this.body) {
            //is field statement
            if (reflection_1.isClassFieldStatement(statement)) {
                //do nothing with class fields in this situation, they are handled elsewhere
                continue;
                //methods
            }
            else if (reflection_1.isClassMethodStatement(statement)) {
                //store overridden parent methods as super{parentIndex}_{methodName}
                if (
                //is override method
                statement.override ||
                    //is constructor function in child class
                    (statement.name.text.toLowerCase() === 'new' && ancestors[0])) {
                    result.push(`instance.super${parentClassIndex}_${statement.name.text} = instance.${statement.name.text}`, state.newline(), state.indent());
                }
                state.classStatement = this;
                result.push('instance.', state.sourceNode(statement.name, statement.name.text), ' = ', ...statement.transpile(state), state.newline(), state.indent());
                delete state.classStatement;
            }
            else {
                //other random statements (probably just comments)
                result.push(...statement.transpile(state), state.newline(), state.indent());
            }
        }
        //return the instance
        result.push('return instance\n');
        state.blockDepth--;
        result.push(state.indent());
        result.push(`end function`);
        return result;
    }
    /**
     * The class function is the function with the same name as the class. This is the function that
     * consumers should call to create a new instance of that class.
     * This invokes the builder, gets an instance of the class, then invokes the "new" function on that class.
     */
    getTranspiledClassFunction(state) {
        let result = [];
        const constructorFunction = this.getConstructorFunction();
        const constructorParams = constructorFunction ? constructorFunction.func.parameters : [];
        result.push(new source_map_1.SourceNode(this.classKeyword.range.start.line + 1, this.classKeyword.range.start.character, state.pathAbsolute, 'function'), new source_map_1.SourceNode(this.classKeyword.range.end.line + 1, this.classKeyword.range.end.character, state.pathAbsolute, ' '), new source_map_1.SourceNode(this.name.range.start.line + 1, this.name.range.start.character, state.pathAbsolute, this.getName(Parser_1.ParseMode.BrightScript)), `(`);
        let i = 0;
        for (let param of constructorParams) {
            if (i > 0) {
                result.push(', ');
            }
            result.push(param.transpile(state));
            i++;
        }
        result.push(')', '\n');
        state.blockDepth++;
        result.push(state.indent());
        result.push(`instance = ${this.getBuilderName(this.getName(Parser_1.ParseMode.BrightScript))}()\n`);
        result.push(state.indent());
        result.push(`instance.new(`);
        //append constructor arguments
        i = 0;
        for (let param of constructorParams) {
            if (i > 0) {
                result.push(', ');
            }
            result.push(state.sourceNode(param, param.name.text));
            i++;
        }
        result.push(')', '\n');
        result.push(state.indent());
        result.push(`return instance\n`);
        state.blockDepth--;
        result.push(state.indent());
        result.push(`end function`);
        return result;
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            for (let i = 0; i < this.body.length; i++) {
                visitors_1.walk(this.body, i, visitor, options, this);
            }
        }
    }
}
exports.ClassStatement = ClassStatement;
class ClassMethodStatement extends FunctionStatement {
    constructor(accessModifier, name, func, override) {
        var _a;
        super(name, func, undefined);
        this.accessModifier = accessModifier;
        this.override = override;
        this.range = util_1.util.createRangeFromPositions(((_a = this.accessModifier) !== null && _a !== void 0 ? _a : this.func).range.start, this.func.range.end);
    }
    transpile(state) {
        if (this.name.text.toLowerCase() === 'new') {
            this.ensureSuperConstructorCall(state);
            //TODO we need to undo this at the bottom of this method
            this.injectFieldInitializersForConstructor(state);
        }
        //TODO - remove type information from these methods because that doesn't work
        //convert the `super` calls into the proper methods
        const parentClassIndex = state.classStatement.getParentClassIndex(state);
        const visitor = visitors_1.createVisitor({
            VariableExpression: e => {
                if (e.name.text.toLocaleLowerCase() === 'super') {
                    e.name.text = `m.super${parentClassIndex}_new`;
                }
            },
            DottedGetExpression: e => {
                const beginningVariable = util_1.util.findBeginningVariableExpression(e);
                const lowerName = beginningVariable === null || beginningVariable === void 0 ? void 0 : beginningVariable.getName(Parser_1.ParseMode.BrighterScript).toLowerCase();
                if (lowerName === 'super') {
                    beginningVariable.name.text = 'm';
                    e.name.text = `super${parentClassIndex}_${e.name.text}`;
                }
            }
        });
        const walkOptions = { walkMode: visitors_1.WalkMode.visitExpressions };
        for (const statement of this.func.body.statements) {
            visitor(statement, undefined);
            statement.walk(visitor, walkOptions);
        }
        return this.func.transpile(state);
    }
    getTypedef(state) {
        const result = [];
        if (this.accessModifier) {
            result.push(this.accessModifier.text, ' ');
        }
        if (this.override) {
            result.push('override ');
        }
        result.push(...super.getTypedef(state));
        return result;
    }
    /**
     * All child classes must call the parent constructor. The type checker will warn users when they don't call it in their own class,
     * but we still need to call it even if they have omitted it. This injects the super call if it's missing
     */
    ensureSuperConstructorCall(state) {
        //if this class doesn't extend another class, quit here
        if (state.classStatement.getAncestors(state).length === 0) {
            return;
        }
        //if the first statement is a call to super, quit here
        let firstStatement = this.func.body.statements[0];
        if (
        //is a call statement
        reflection_1.isExpressionStatement(firstStatement) && reflection_1.isCallExpression(firstStatement.expression) &&
            //is a call to super
            util_1.util.findBeginningVariableExpression(firstStatement === null || firstStatement === void 0 ? void 0 : firstStatement.expression.callee).name.text.toLowerCase() === 'super') {
            return;
        }
        //this is a child class, and the first statement isn't a call to super. Inject one
        this.func.body.statements.unshift(new ExpressionStatement(new Expression_1.CallExpression(new Expression_1.VariableExpression({
            kind: lexer_1.TokenKind.Identifier,
            text: 'super',
            isReserved: false,
            range: state.classStatement.name.range,
            leadingWhitespace: ''
        }, null), {
            kind: lexer_1.TokenKind.LeftParen,
            text: '(',
            isReserved: false,
            range: state.classStatement.name.range,
            leadingWhitespace: ''
        }, {
            kind: lexer_1.TokenKind.RightParen,
            text: ')',
            isReserved: false,
            range: state.classStatement.name.range,
            leadingWhitespace: ''
        }, [], null)));
    }
    /**
     * Inject field initializers at the top of the `new` function (after any present `super()` call)
     */
    injectFieldInitializersForConstructor(state) {
        let startingIndex = state.classStatement.hasParentClass() ? 1 : 0;
        let newStatements = [];
        //insert the field initializers in order
        for (let field of state.classStatement.fields) {
            let thisQualifiedName = Object.assign({}, field.name);
            thisQualifiedName.text = 'm.' + field.name.text;
            if (field.initialValue) {
                newStatements.push(new AssignmentStatement(field.equal, thisQualifiedName, field.initialValue, this.func));
            }
            else {
                //if there is no initial value, set the initial value to `invalid`
                newStatements.push(new AssignmentStatement(creators_1.createToken(lexer_1.TokenKind.Equal, '=', field.name.range), thisQualifiedName, creators_1.createInvalidLiteral('invalid', field.name.range), this.func));
            }
        }
        this.func.body.statements.splice(startingIndex, 0, ...newStatements);
    }
    walk(visitor, options) {
        if (options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'func', visitor, options);
        }
    }
}
exports.ClassMethodStatement = ClassMethodStatement;
class ClassFieldStatement extends Statement {
    constructor(accessModifier, name, as, type, equal, initialValue) {
        var _a, _b, _c, _d;
        super();
        this.accessModifier = accessModifier;
        this.name = name;
        this.as = as;
        this.type = type;
        this.equal = equal;
        this.initialValue = initialValue;
        this.range = util_1.util.createRangeFromPositions(((_a = this.accessModifier) !== null && _a !== void 0 ? _a : this.name).range.start, ((_d = (_c = (_b = this.initialValue) !== null && _b !== void 0 ? _b : this.type) !== null && _c !== void 0 ? _c : this.as) !== null && _d !== void 0 ? _d : this.name).range.end);
    }
    /**
     * Derive a ValueKind from the type token, or the intial value.
     * Defaults to `ValueKind.Dynamic`
     */
    getType() {
        if (this.type) {
            return util_1.util.tokenToBscType(this.type);
        }
        else if (reflection_1.isLiteralExpression(this.initialValue)) {
            return this.initialValue.type;
        }
        else {
            return new DynamicType_1.DynamicType();
        }
    }
    transpile(state) {
        throw new Error('transpile not implemented for ' + Object.getPrototypeOf(this).constructor.name);
    }
    getTypedef(state) {
        var _a, _b, _c;
        const result = [];
        if (this.name) {
            let type = this.getType();
            if (reflection_1.isInvalidType(type) || reflection_1.isVoidType(type)) {
                type = new DynamicType_1.DynamicType();
            }
            result.push((_b = (_a = this.accessModifier) === null || _a === void 0 ? void 0 : _a.text) !== null && _b !== void 0 ? _b : 'public', ' ', (_c = this.name) === null || _c === void 0 ? void 0 : _c.text, ' as ', type.toString());
        }
        return result;
    }
    walk(visitor, options) {
        if (this.initialValue && options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'initialValue', visitor, options);
        }
    }
}
exports.ClassFieldStatement = ClassFieldStatement;
class TryCatchStatement extends Statement {
    constructor(tryToken, tryBranch, catchToken, exceptionVariable, catchBranch, endTryToken) {
        super();
        this.tryToken = tryToken;
        this.tryBranch = tryBranch;
        this.catchToken = catchToken;
        this.exceptionVariable = exceptionVariable;
        this.catchBranch = catchBranch;
        this.endTryToken = endTryToken;
    }
    get range() {
        var _a, _b, _c, _d, _e;
        return util_1.util.createRangeFromPositions(this.tryToken.range.start, ((_e = (_d = (_c = (_b = (_a = this.endTryToken) !== null && _a !== void 0 ? _a : this.catchBranch) !== null && _b !== void 0 ? _b : this.exceptionVariable) !== null && _c !== void 0 ? _c : this.catchToken) !== null && _d !== void 0 ? _d : this.tryBranch) !== null && _e !== void 0 ? _e : this.tryToken).range.end);
    }
    transpile(state) {
        return [
            state.sourceNode(this.tryToken, 'try'),
            ...this.tryBranch.transpile(state),
            state.newline(),
            state.indent(),
            state.sourceNode(this.catchToken, 'catch'),
            ' ',
            state.sourceNode(this.exceptionVariable, this.exceptionVariable.text),
            ...this.catchBranch.transpile(state),
            state.newline(),
            state.indent(),
            state.sourceNode(this.endTryToken, 'end try')
        ];
    }
    walk(visitor, options) {
        if (this.tryBranch && options.walkMode & visitors_1.InternalWalkMode.walkStatements) {
            visitors_1.walk(this, 'tryBranch', visitor, options);
            visitors_1.walk(this, 'catchBranch', visitor, options);
        }
    }
}
exports.TryCatchStatement = TryCatchStatement;
class ThrowStatement extends Statement {
    constructor(throwToken, expression) {
        var _a;
        super();
        this.throwToken = throwToken;
        this.expression = expression;
        this.range = util_1.util.createRangeFromPositions(this.throwToken.range.start, ((_a = this.expression) !== null && _a !== void 0 ? _a : this.throwToken).range.end);
    }
    transpile(state) {
        const result = [
            state.sourceNode(this.throwToken, 'throw'),
            ' '
        ];
        //if we have an expression, transpile it
        if (this.expression) {
            result.push(...this.expression.transpile(state));
            //no expression found. Rather than emit syntax errors, provide a generic error message
        }
        else {
            result.push('"An error has occurred"');
        }
        return result;
    }
    walk(visitor, options) {
        if (this.expression && options.walkMode & visitors_1.InternalWalkMode.walkExpressions) {
            visitors_1.walk(this, 'expression', visitor, options);
        }
    }
}
exports.ThrowStatement = ThrowStatement;
//# sourceMappingURL=Statement.js.map