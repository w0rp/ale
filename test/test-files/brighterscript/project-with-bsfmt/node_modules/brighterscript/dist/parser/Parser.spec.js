"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rangeToArray = void 0;
const chai_1 = require("chai");
const lexer_1 = require("../lexer");
const Expression_1 = require("./Expression");
const Parser_1 = require("./Parser");
const Statement_1 = require("./Statement");
const vscode_languageserver_1 = require("vscode-languageserver");
const DiagnosticMessages_1 = require("../DiagnosticMessages");
describe('parser', () => {
    it('emits empty object when empty token list is provided', () => {
        chai_1.expect(Parser_1.Parser.parse([])).to.deep.include({
            statements: [],
            diagnostics: []
        });
    });
    describe('findReferences', () => {
        it('gets called if references are missing', () => {
            const parser = Parser_1.Parser.parse(`
                sub main()
                end sub

                sub UnusedFunction()
                end sub
            `);
            chai_1.expect(parser.references.functionStatements.map(x => x.name.text)).to.eql([
                'main',
                'UnusedFunction'
            ]);
            //simulate a tree-shaking plugin by removing the `UnusedFunction`
            parser.ast.statements.splice(1);
            //tell the parser we modified the AST and need to regenerate references
            parser.invalidateReferences();
            chai_1.expect(parser['_references']).not.to.exist;
            //calling `references` automatically regenerates the references
            chai_1.expect(parser.references.functionStatements.map(x => x.name.text)).to.eql([
                'main'
            ]);
        });
    });
    describe('callfunc operator', () => {
        it('is not allowed in brightscript mode', () => {
            var _a;
            let parser = parse(`
                sub main(node as dynamic)
                    node@.doSomething(1, 2)
                end sub
            `, Parser_1.ParseMode.BrightScript);
            chai_1.expect((_a = parser.diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.equal(DiagnosticMessages_1.DiagnosticMessages.bsFeatureNotSupportedInBrsFiles('callfunc operator').message);
        });
        it('does not cause parse errors', () => {
            var _a, _b, _c, _d, _e;
            let parser = parse(`
                sub main(node as dynamic)
                    node@.doSomething(1, 2)
                end sub
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = parser.diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            chai_1.expect((_e = (_d = (_c = (_b = parser.statements[0]) === null || _b === void 0 ? void 0 : _b.func) === null || _c === void 0 ? void 0 : _c.body) === null || _d === void 0 ? void 0 : _d.statements[0]) === null || _e === void 0 ? void 0 : _e.expression).to.be.instanceof(Expression_1.CallfuncExpression);
        });
    });
    describe('diagnostic locations', () => {
        it('tracks basic diagnostic locations', () => {
            chai_1.expect(parse(`
                sub main()
                    call()a
                end sub
            `).diagnostics.map(x => rangeToArray(x.range))).to.eql([
                [2, 26, 2, 27]
            ]);
        });
        it.skip('handles edge cases', () => {
            var _a, _b;
            let diagnostics = parse(`
                function BuildCommit()
                    return "6c5cdf1"
                end functionasdf
            `).diagnostics;
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.exist.and.to.eql(DiagnosticMessages_1.DiagnosticMessages.expectedStatementOrFunctionCallButReceivedExpression().message);
            chai_1.expect((_b = diagnostics[0]) === null || _b === void 0 ? void 0 : _b.range).to.eql(vscode_languageserver_1.Range.create(3, 20, 3, 32));
        });
    });
    describe('parse', () => {
        it('supports using "interface" as parameter name', () => {
            var _a;
            chai_1.expect((_a = parse(`
                sub main(interface as object)
                end sub
            `, Parser_1.ParseMode.BrighterScript).diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
        });
        describe('namespace', () => {
            it('catches namespaces declared not at root level', () => {
                var _a;
                chai_1.expect((_a = parse(`
                    sub main()
                        namespace Name.Space
                        end namespace
                    end sub
                `, Parser_1.ParseMode.BrighterScript).diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.equal(DiagnosticMessages_1.DiagnosticMessages.keywordMustBeDeclaredAtRootLevel('namespace').message);
            });
            it('parses empty namespace', () => {
                var _a;
                let { statements, diagnostics } = parse(`
                        namespace Name.Space
                        end namespace
                    `, Parser_1.ParseMode.BrighterScript);
                chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
                chai_1.expect(statements[0]).to.be.instanceof(Statement_1.NamespaceStatement);
            });
            it('includes body', () => {
                var _a;
                let { statements, diagnostics } = parse(`
                        namespace Name.Space
                            sub main()
                            end sub
                        end namespace
                    `, Parser_1.ParseMode.BrighterScript);
                chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
                chai_1.expect(statements[0]).to.be.instanceof(Statement_1.NamespaceStatement);
                chai_1.expect(statements[0].body.statements[0]).to.be.instanceof(Statement_1.FunctionStatement);
            });
            it('supports comments and newlines', () => {
                var _a;
                let { diagnostics } = parse(`
                        namespace Name.Space 'comment

                        'comment

                            sub main() 'comment
                            end sub 'comment
                            'comment

                            'comment
                        end namespace 'comment
                    `, Parser_1.ParseMode.BrighterScript);
                chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            });
            it('catches missing name', () => {
                var _a;
                let { diagnostics } = parse(`
                        namespace
                        end namespace
                    `, Parser_1.ParseMode.BrighterScript);
                chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.equal(DiagnosticMessages_1.DiagnosticMessages.expectedIdentifierAfterKeyword('namespace').message);
            });
            it('recovers after missing `end namespace`', () => {
                var _a, _b, _c;
                let parser = parse(`
                    namespace Name.Space
                        sub main()
                        end sub
                `, Parser_1.ParseMode.BrighterScript);
                chai_1.expect(parser.ast.statements[0]).to.be.instanceof(Statement_1.NamespaceStatement);
                chai_1.expect((_a = parser.diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.equal(DiagnosticMessages_1.DiagnosticMessages.couldNotFindMatchingEndKeyword('namespace').message);
                chai_1.expect((_c = (_b = parser.ast.statements[0]) === null || _b === void 0 ? void 0 : _b.body) === null || _c === void 0 ? void 0 : _c.statements[0]).to.be.instanceof(Statement_1.FunctionStatement);
            });
            it('adds diagnostic when encountering namespace in brightscript mode', () => {
                var _a;
                let parser = Parser_1.Parser.parse(`
                    namespace Name.Space
                    end namespace
                `);
                chai_1.expect((_a = parser.diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.equal(DiagnosticMessages_1.DiagnosticMessages.bsFeatureNotSupportedInBrsFiles('namespace').message);
            });
        });
        it('supports << operator', () => {
            var _a;
            chai_1.expect((_a = parse(`
                sub main()
                    print ((r << 24) + (g << 16) + (b << 8) + a)
                end sub
            `).diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
        });
        it('supports >> operator', () => {
            var _a;
            chai_1.expect((_a = parse(`
                sub main()
                    print ((r >> 24) + (g >> 16) + (b >> 8) + a)
                end sub
            `).diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
        });
        it('allows global function names with same as token to be called', () => {
            var _a;
            chai_1.expect((_a = parse(`
                sub main()
                    print string(123)
                end sub
            `).diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
        });
        it('supports @ symbol between names', () => {
            var _a;
            let parser = parse(`
                sub main()
                    firstName = personXml@firstName
                    age = personXml.firstChild@age
                end sub
            `);
            chai_1.expect((_a = parser.diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.not.exist;
            let statements = parser.statements[0].func.body.statements;
            let first = statements[0].value;
            chai_1.expect(first).to.be.instanceof(Expression_1.XmlAttributeGetExpression);
            chai_1.expect(first.name.text).to.equal('firstName');
            chai_1.expect(first.at.text).to.equal('@');
            chai_1.expect(first.obj.name.text).to.equal('personXml');
            let second = statements[1].value;
            chai_1.expect(second).to.be.instanceof(Expression_1.XmlAttributeGetExpression);
            chai_1.expect(second.name.text).to.equal('age');
            chai_1.expect(second.at.text).to.equal('@');
            chai_1.expect(second.obj.name.text).to.equal('firstChild');
        });
        it('does not allow chaining of @ symbols', () => {
            let parser = parse(`
                sub main()
                    personXml = invalid
                    name = personXml@name@age@shoeSize
                end sub
            `);
            chai_1.expect(parser.diagnostics).not.to.be.empty;
        });
        it('unknown function type does not invalidate rest of function', () => {
            let { statements, diagnostics } = parse(`
                function log() as UNKNOWN_TYPE
                end function
            `);
            chai_1.expect(diagnostics.length).to.be.greaterThan(0);
            chai_1.expect(statements[0]).to.exist;
        });
        it('works with conditionals', () => {
            var _a;
            chai_1.expect((_a = parse(`
                function printNumber()
                    if true then
                        print 1
                    else if true
                        print 2
                    end if
                end function
            `).diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
        });
        it('supports single-line if statements', () => {
            var _a;
            chai_1.expect((_a = parse(`If true Then print "error" : Stop`).diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.not.exist;
        });
        it('works with excess newlines', () => {
            var _a;
            let { tokens } = lexer_1.Lexer.scan('function boolToNumber() as string\n\n' +
                '   if true then\n\n' +
                '       print 1\n\n' +
                '   elseif true then\n\n' +
                '       print 0\n\n' +
                '   else\n\n' +
                '       print 1\n\n' +
                '   end if\n\n' +
                'end function\n\n');
            chai_1.expect((_a = Parser_1.Parser.parse(tokens).diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.not.exist;
        });
        it('does not invalidate entire file when line ends with a period', () => {
            let { tokens } = lexer_1.Lexer.scan(`
                sub main()
                    person.a
                end sub

            `);
            let { diagnostics } = Parser_1.Parser.parse(tokens);
            chai_1.expect(diagnostics).to.be.lengthOf(1, 'Error count should be 0');
        });
        it.skip('allows printing object with trailing period', () => {
            let { tokens } = lexer_1.Lexer.scan(`print a.`);
            let { statements, diagnostics } = Parser_1.Parser.parse(tokens);
            let printStatement = statements[0];
            chai_1.expect(diagnostics).to.be.empty;
            chai_1.expect(printStatement).to.be.instanceof(Statement_1.PrintStatement);
            chai_1.expect(printStatement.expressions[0]).to.be.instanceof(Expression_1.DottedGetExpression);
        });
        describe('comments', () => {
            it('combines multi-line comments', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    'line 1
                    'line 2
                    'line 3
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Error count should be 0');
                chai_1.expect(statements[0].text).to.equal(`'line 1\n'line 2\n'line 3`);
            });
            it('does not combile comments separated by newlines', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    'line 1

                    'line 2

                    'line 3
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Error count should be 0');
                chai_1.expect(statements).to.be.lengthOf(3);
                chai_1.expect(statements[0].text).to.equal(`'line 1`);
                chai_1.expect(statements[1].text).to.equal(`'line 2`);
                chai_1.expect(statements[2].text).to.equal(`'line 3`);
            });
            it('works after print statement', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    sub main()
                        print "hi" 'comment 1
                    end sub
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Error count should be 0');
                chai_1.expect(statements[0].func.body.statements[1].text).to.equal(`'comment 1`);
            });
            it('declaration-level', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    'comment 1
                    function a()
                    end function
                    'comment 2
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Error count should be 0');
                chai_1.expect(statements[0].text).to.equal(`'comment 1`);
                chai_1.expect(statements[2].text).to.equal(`'comment 2`);
            });
            it('works in aa literal as its own statement', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    obj = {
                        "name": true,
                        'comment
                    }
                `);
                let { diagnostics } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Error count should be 0');
            });
            it('parses after function call', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    sub Main()
                        name = "Hello"
                        DoSomething(name) 'comment 1
                    end sub
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Should have zero diagnostics');
                chai_1.expect(statements[0].func.body.statements[2].text).to.equal(`'comment 1`);
            });
            it('function', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    function a() 'comment 1
                        'comment 2
                        num = 1
                        'comment 3
                    end function 'comment 4
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Should have zero diagnostics');
                chai_1.expect(statements[0].func.body.statements[0].text).to.equal(`'comment 1`);
                chai_1.expect(statements[0].func.body.statements[1].text).to.equal(`'comment 2`);
                chai_1.expect(statements[0].func.body.statements[3].text).to.equal(`'comment 3`);
                chai_1.expect(statements[1].text).to.equal(`'comment 4`);
            });
            it('if statement`', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    function a()
                        if true then 'comment 1
                            'comment 2
                            print "hello"
                            'comment 3
                        else if true then 'comment 4
                            'comment 5
                            print "hello"
                            'comment 6
                        else 'comment 7
                            'comment 8
                            print "hello"
                            'comment 9
                        end if 'comment 10
                    end function
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Should have zero diagnostics');
                let ifStmt = statements[0].func.body.statements[0];
                chai_1.expect(ifStmt.thenBranch.statements[0].text).to.equal(`'comment 1`);
                chai_1.expect(ifStmt.thenBranch.statements[1].text).to.equal(`'comment 2`);
                chai_1.expect(ifStmt.thenBranch.statements[3].text).to.equal(`'comment 3`);
                chai_1.expect(ifStmt.elseIfs[0].thenBranch.statements[0].text).to.equal(`'comment 4`);
                chai_1.expect(ifStmt.elseIfs[0].thenBranch.statements[1].text).to.equal(`'comment 5`);
                chai_1.expect(ifStmt.elseIfs[0].thenBranch.statements[3].text).to.equal(`'comment 6`);
                chai_1.expect(ifStmt.elseBranch.statements[0].text).to.equal(`'comment 7`);
                chai_1.expect(ifStmt.elseBranch.statements[1].text).to.equal(`'comment 8`);
                chai_1.expect(ifStmt.elseBranch.statements[3].text).to.equal(`'comment 9`);
                chai_1.expect(statements[0].func.body.statements[1].text).to.equal(`'comment 10`);
            });
            it('while', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    function a()
                        while true 'comment 1
                            'comment 2
                            print "true"
                            'comment 3
                        end while 'comment 4
                    end function
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Error count should be zero');
                let stmt = statements[0].func.body.statements[0];
                chai_1.expect(stmt.body.statements[0].text).to.equal(`'comment 1`);
                chai_1.expect(stmt.body.statements[1].text).to.equal(`'comment 2`);
                chai_1.expect(stmt.body.statements[3].text).to.equal(`'comment 3`);
                chai_1.expect(statements[0].func.body.statements[1].text).to.equal(`'comment 4`);
            });
            it('for', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    function a()
                        for i = 0 to 10 step 1 'comment 1
                            'comment 2
                            print 1
                            'comment 3
                        end for 'comment 4
                    end function
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Error count should be zero');
                let stmt = statements[0].func.body.statements[0];
                chai_1.expect(stmt.body.statements[0].text).to.equal(`'comment 1`);
                chai_1.expect(stmt.body.statements[1].text).to.equal(`'comment 2`);
                chai_1.expect(stmt.body.statements[3].text).to.equal(`'comment 3`);
                chai_1.expect(statements[0].func.body.statements[1].text).to.equal(`'comment 4`);
            });
            it('for each', () => {
                let { tokens } = lexer_1.Lexer.scan(`
                    function a()
                        for each val in [1,2,3] 'comment 1
                            'comment 2
                            print 1
                            'comment 3
                        end for 'comment 4
                    end function
                `);
                let { diagnostics, statements } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics).to.be.lengthOf(0, 'Error count should be zero');
                let stmt = statements[0].func.body.statements[0];
                chai_1.expect(stmt.body.statements[0].text).to.equal(`'comment 1`);
                chai_1.expect(stmt.body.statements[1].text).to.equal(`'comment 2`);
                chai_1.expect(stmt.body.statements[3].text).to.equal(`'comment 3`);
                chai_1.expect(statements[0].func.body.statements[1].text).to.equal(`'comment 4`);
            });
        });
    });
    describe('reservedWords', () => {
        describe('`then`', () => {
            it('is not allowed as a local identifier', () => {
                let { diagnostics } = parse(`
                    sub main()
                        then = true
                    end sub
                `);
                chai_1.expect(diagnostics).to.be.lengthOf(1);
            });
            it('is allowed as an AA property name', () => {
                var _a;
                let { diagnostics } = parse(`
                    sub main()
                        person = {
                            then: true
                        }
                        person.then = false
                        print person.then
                    end sub
                `);
                chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            });
        });
        it('"end" is not allowed as a local identifier', () => {
            let { diagnostics } = parse(`
                sub main()
                    end = true
                end sub
            `);
            chai_1.expect(diagnostics).to.be.lengthOf(1);
        });
        it('none of them can be used as local variables', () => {
            let reservedWords = new Set(lexer_1.ReservedWords);
            //remove the rem keyword because it's a comment...won't cause error
            reservedWords.delete('rem');
            for (let reservedWord of reservedWords) {
                let { tokens } = lexer_1.Lexer.scan(`
                    sub main()
                        ${reservedWord} = true
                    end sub
                `);
                let { diagnostics } = Parser_1.Parser.parse(tokens);
                chai_1.expect(diagnostics, `assigning to reserved word "${reservedWord}" should have been an error`).to.be.length.greaterThan(0);
            }
        });
    });
    describe('import keyword', () => {
        it('parses without errors', () => {
            var _a;
            let { statements, diagnostics } = parse(`
                import "somePath"
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            chai_1.expect(statements[0]).to.be.instanceof(Statement_1.ImportStatement);
        });
        it('catches import statements used in brightscript files', () => {
            var _a;
            let { statements, diagnostics } = parse(`
                import "somePath"
            `, Parser_1.ParseMode.BrightScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.eql(DiagnosticMessages_1.DiagnosticMessages.bsFeatureNotSupportedInBrsFiles('import statements').message);
            chai_1.expect(statements[0]).to.be.instanceof(Statement_1.ImportStatement);
        });
        it('catchs missing file path', () => {
            var _a;
            let { statements, diagnostics } = parse(`
                import
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.equal(DiagnosticMessages_1.DiagnosticMessages.expectedStringLiteralAfterKeyword('import').message);
            chai_1.expect(statements[0]).to.be.instanceof(Statement_1.ImportStatement);
        });
    });
    describe('Annotations', () => {
        it('parses without errors', () => {
            var _a;
            let { statements, diagnostics } = parse(`
                @meta1
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            chai_1.expect(statements.length).to.equal(0);
        });
        it('parses with error if malformed', () => {
            var _a;
            let { diagnostics } = parse(`
                @
                sub main()
                end sub
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.code).to.equal(1081); //unexpected token '@'
        });
        it('attaches an annotation to next statement', () => {
            var _a;
            let { statements, diagnostics } = parse(`
                @meta1
                function main()
                end function

                @meta2 sub init()
                end sub
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            chai_1.expect(statements[0]).to.be.instanceof(Statement_1.FunctionStatement);
            let fn = statements[0];
            chai_1.expect(fn.annotations).to.exist;
            chai_1.expect(fn.annotations[0]).to.be.instanceof(Expression_1.AnnotationExpression);
            chai_1.expect(fn.annotations[0].nameToken.text).to.equal('meta1');
            chai_1.expect(fn.annotations[0].name).to.equal('meta1');
            chai_1.expect(statements[1]).to.be.instanceof(Statement_1.FunctionStatement);
            fn = statements[1];
            chai_1.expect(fn.annotations).to.exist;
            chai_1.expect(fn.annotations[0]).to.be.instanceof(Expression_1.AnnotationExpression);
            chai_1.expect(fn.annotations[0].nameToken.text).to.equal('meta2');
        });
        it('attaches annotations inside a function body', () => {
            var _a, _b;
            let { statements, diagnostics } = parse(`
                function main()
                    @meta1
                    print "hello"
                end function
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            let fn = statements[0];
            let fnStatements = fn.func.body.statements;
            let stat = fnStatements[0];
            chai_1.expect(stat).to.exist;
            chai_1.expect((_b = stat.annotations) === null || _b === void 0 ? void 0 : _b.length).to.equal(1);
            chai_1.expect(stat.annotations[0]).to.be.instanceof(Expression_1.AnnotationExpression);
        });
        it('attaches multiple annotations to next statement', () => {
            var _a;
            let { statements, diagnostics } = parse(`
                @meta1
                @meta2 @meta3
                function main()
                end function
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            chai_1.expect(statements[0]).to.be.instanceof(Statement_1.FunctionStatement);
            let fn = statements[0];
            chai_1.expect(fn.annotations).to.exist;
            chai_1.expect(fn.annotations.length).to.equal(3);
            chai_1.expect(fn.annotations[0]).to.be.instanceof(Expression_1.AnnotationExpression);
            chai_1.expect(fn.annotations[1]).to.be.instanceof(Expression_1.AnnotationExpression);
            chai_1.expect(fn.annotations[2]).to.be.instanceof(Expression_1.AnnotationExpression);
        });
        it('allows annotations with parameters', () => {
            var _a;
            let { statements, diagnostics } = parse(`
                @meta1("arg", 2, true, { prop: "value" })
                function main()
                end function
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            let fn = statements[0];
            chai_1.expect(fn.annotations).to.exist;
            chai_1.expect(fn.annotations[0]).to.be.instanceof(Expression_1.AnnotationExpression);
            chai_1.expect(fn.annotations[0].nameToken.text).to.equal('meta1');
            chai_1.expect(fn.annotations[0].call).to.be.instanceof(Expression_1.CallExpression);
        });
        it('can convert argument of an annotation to JS types', () => {
            var _a;
            let { statements, diagnostics } = parse(`
                @meta1
                function main()
                end function

                @meta2(
                    "arg", 2, true,
                    { prop: "value" }, [1, 2],
                    sub()
                    end sub
                )
                sub init()
                end sub
            `, Parser_1.ParseMode.BrighterScript);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            chai_1.expect(statements[0]).to.be.instanceof(Statement_1.FunctionStatement);
            let fn = statements[0];
            chai_1.expect(fn.annotations).to.exist;
            chai_1.expect(fn.annotations[0].getArguments()).to.deep.equal([]);
            chai_1.expect(statements[1]).to.be.instanceof(Statement_1.FunctionStatement);
            fn = statements[1];
            chai_1.expect(fn.annotations).to.exist;
            chai_1.expect(fn.annotations[0]).to.be.instanceof(Expression_1.AnnotationExpression);
            chai_1.expect(fn.annotations[0].getArguments()).to.deep.equal([
                'arg', 2, true,
                { prop: 'value' }, [1, 2],
                null
            ]);
            let allArgs = fn.annotations[0].getArguments(false);
            chai_1.expect(allArgs.pop()).to.be.instanceOf(Expression_1.FunctionExpression);
        });
    });
});
function parse(text, mode) {
    let { tokens } = lexer_1.Lexer.scan(text);
    return Parser_1.Parser.parse(tokens, {
        mode: mode
    });
}
function rangeToArray(range) {
    return [
        range.start.line,
        range.start.character,
        range.end.line,
        range.end.character
    ];
}
exports.rangeToArray = rangeToArray;
//# sourceMappingURL=Parser.spec.js.map