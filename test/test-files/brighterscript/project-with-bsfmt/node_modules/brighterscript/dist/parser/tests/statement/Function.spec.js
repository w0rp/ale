"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Parser_1 = require("../../Parser");
const lexer_1 = require("../../../lexer");
const Parser_spec_1 = require("../Parser.spec");
describe('parser', () => {
    describe('function declarations', () => {
        it('recovers when using `end sub` instead of `end function`', () => {
            const { tokens } = lexer_1.Lexer.scan(`
                function Main()
                    print "Hello world"
                end sub

                sub DoSomething()

                end sub
            `);
            let { statements, diagnostics } = Parser_1.Parser.parse(tokens);
            chai_1.expect(diagnostics).to.be.lengthOf(1);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses minimal empty function declarations', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'function'),
                Parser_spec_1.identifier('foo'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end function'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses non-empty function declarations', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'function'),
                Parser_spec_1.identifier('foo'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.Print, 'print'),
                Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'Lorem ipsum'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end function'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses functions with implicit-dynamic arguments', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'function'),
                Parser_spec_1.identifier('add2'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('b'),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end function'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses functions with typed arguments', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'function'),
                Parser_spec_1.identifier('repeat'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.identifier('str'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.identifier('string'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('count'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.identifier('integer'),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end function'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses functions with default argument expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'function'),
                Parser_spec_1.identifier('add'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '3'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('b'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '4'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('c'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Plus, '+'),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end function'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses functions with typed arguments and default expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'function'),
                Parser_spec_1.identifier('add'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '3'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.identifier('integer'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('b'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Plus, '+'),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.identifier('integer'),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end function'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses return types', () => {
            var _a;
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'function'),
                Parser_spec_1.identifier('foo'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.token(lexer_1.TokenKind.Void, 'void'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end function'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).to.not.exist;
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('does not allow type designators at end of name', () => {
            const { tokens } = lexer_1.Lexer.scan(`
                function StringFunc#()
                    return 1
                end function

                function IntegerFunc%()
                    return 1
                end function

                function FloatFunc!()
                    return 1
                end function

                function DoubleFunc#()
                    return 1
                end function
            `);
            const { statements, diagnostics } = Parser_1.Parser.parse(tokens);
            chai_1.expect(diagnostics).to.be.lengthOf(4);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
    });
    describe('sub declarations', () => {
        it('recovers when using `end function` instead of `end sub`', () => {
            const { tokens } = lexer_1.Lexer.scan(`
                sub Main()
                    print "Hello world"
                end function

                sub DoSomething()

                end sub
            `);
            let { statements, diagnostics } = Parser_1.Parser.parse(tokens);
            chai_1.expect(diagnostics).to.be.lengthOf(1);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses minimal sub declarations', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Sub, 'sub'),
                Parser_spec_1.identifier('bar'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndSub, 'end sub'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses non-empty sub declarations', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Sub, 'sub'),
                Parser_spec_1.identifier('foo'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.Print, 'print'),
                Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'Lorem ipsum'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndSub, 'end sub'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses subs with implicit-dynamic arguments', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'sub'),
                Parser_spec_1.identifier('add2'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('b'),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end sub'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses subs with typed arguments', () => {
            var _a;
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Function, 'sub'),
                Parser_spec_1.identifier('repeat'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.identifier('str'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.identifier('string'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('count'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.identifier('integer'),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndFunction, 'end sub'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message).not.to.exist;
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses subs with default argument expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Sub, 'sub'),
                Parser_spec_1.identifier('add'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '3'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('b'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '4'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('c'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Plus, '+'),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndSub, 'end sub'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('parses subs with typed arguments and default expressions', () => {
            let { statements, diagnostics } = Parser_1.Parser.parse([
                Parser_spec_1.token(lexer_1.TokenKind.Sub, 'sub'),
                Parser_spec_1.identifier('add'),
                Parser_spec_1.token(lexer_1.TokenKind.LeftParen, '('),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '3'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.identifier('integer'),
                Parser_spec_1.token(lexer_1.TokenKind.Comma, ','),
                Parser_spec_1.identifier('b'),
                Parser_spec_1.token(lexer_1.TokenKind.Equal, '='),
                Parser_spec_1.identifier('a'),
                Parser_spec_1.token(lexer_1.TokenKind.Plus, '+'),
                Parser_spec_1.token(lexer_1.TokenKind.IntegerLiteral, '5'),
                Parser_spec_1.token(lexer_1.TokenKind.As, 'as'),
                Parser_spec_1.identifier('integer'),
                Parser_spec_1.token(lexer_1.TokenKind.RightParen, ')'),
                Parser_spec_1.token(lexer_1.TokenKind.Newline, '\\n'),
                Parser_spec_1.token(lexer_1.TokenKind.EndSub, 'end sub'),
                Parser_spec_1.EOF
            ]);
            chai_1.expect(diagnostics).to.be.lengthOf(0);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
        it('does not allow type designators at end of name', () => {
            const { tokens } = lexer_1.Lexer.scan(`
                sub StringSub#()
                end sub

                sub IntegerSub%()
                end sub

                sub FloatSub!()
                end sub

                sub DoubleSub#()
                end sub
            `);
            const { statements, diagnostics } = Parser_1.Parser.parse(tokens);
            chai_1.expect(diagnostics).to.be.lengthOf(4);
            chai_1.expect(statements).to.length.greaterThan(0);
        });
    });
});
//# sourceMappingURL=Function.spec.js.map