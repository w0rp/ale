"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Parser_1 = require("../../Parser");
const lexer_1 = require("../../../lexer");
const Parser_spec_1 = require("../Parser.spec");
const vscode_languageserver_1 = require("vscode-languageserver");
describe('parser print statements', () => {
    it('parses singular print statements', () => {
        let { statements, diagnostics } = Parser_1.Parser.parse([
            Parser_spec_1.token(lexer_1.TokenKind.Print),
            Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'Hello, world'),
            Parser_spec_1.EOF
        ]);
        chai_1.expect(diagnostics).to.be.lengthOf(0);
        chai_1.expect(statements).to.exist;
        chai_1.expect(statements).not.to.be.null;
    });
    it('supports empty print', () => {
        let { statements, diagnostics } = Parser_1.Parser.parse([Parser_spec_1.token(lexer_1.TokenKind.Print), Parser_spec_1.EOF]);
        chai_1.expect(diagnostics).to.be.lengthOf(0);
        chai_1.expect(statements).to.exist;
        chai_1.expect(statements).not.to.be.null;
    });
    it('parses print lists with no separator', () => {
        let { statements, diagnostics } = Parser_1.Parser.parse([
            Parser_spec_1.token(lexer_1.TokenKind.Print),
            Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'Foo'),
            Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'bar'),
            Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'baz'),
            Parser_spec_1.EOF
        ]);
        chai_1.expect(diagnostics).to.be.lengthOf(0);
        chai_1.expect(statements).to.exist;
        chai_1.expect(statements).not.to.be.null;
    });
    it('parses print lists with separators', () => {
        let { statements, diagnostics } = Parser_1.Parser.parse([
            Parser_spec_1.token(lexer_1.TokenKind.Print),
            Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'Foo'),
            Parser_spec_1.token(lexer_1.TokenKind.Semicolon),
            Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'bar'),
            Parser_spec_1.token(lexer_1.TokenKind.Semicolon),
            Parser_spec_1.token(lexer_1.TokenKind.StringLiteral, 'baz'),
            Parser_spec_1.EOF
        ]);
        chai_1.expect(diagnostics).to.be.lengthOf(0);
        chai_1.expect(statements).to.exist;
        chai_1.expect(statements).not.to.be.null;
    });
    it('location tracking', () => {
        /**
         *    0   0   0   1
         *    0   4   8   2
         *  +--------------
         * 1| print "foo"
         */
        let { statements, diagnostics } = Parser_1.Parser.parse([
            {
                kind: lexer_1.TokenKind.Print,
                text: 'print',
                isReserved: true,
                range: vscode_languageserver_1.Range.create(0, 0, 1, 5),
                leadingWhitespace: ''
            },
            {
                kind: lexer_1.TokenKind.StringLiteral,
                text: `"foo"`,
                isReserved: false,
                range: vscode_languageserver_1.Range.create(0, 6, 0, 11),
                leadingWhitespace: ''
            },
            {
                kind: lexer_1.TokenKind.Eof,
                text: '\0',
                isReserved: false,
                range: vscode_languageserver_1.Range.create(0, 11, 0, 12),
                leadingWhitespace: ''
            }
        ]);
        chai_1.expect(diagnostics).to.be.lengthOf(0);
        chai_1.expect(statements).to.be.lengthOf(1);
        chai_1.expect(statements[0].range).to.deep.include(vscode_languageserver_1.Range.create(0, 0, 0, 11));
    });
});
//# sourceMappingURL=PrintStatement.spec.js.map