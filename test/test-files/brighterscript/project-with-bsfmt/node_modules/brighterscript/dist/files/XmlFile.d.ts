import type { CodeWithSourceMap } from 'source-map';
import type { CompletionItem, Hover, Location, Position, Range } from 'vscode-languageserver';
import type { FunctionScope } from '../FunctionScope';
import type { Callable, BsDiagnostic, File, FileReference, FunctionCall } from '../interfaces';
import type { Program } from '../Program';
import { Parser } from '../parser/Parser';
import type { DependencyGraph } from '../DependencyGraph';
export interface SGAstScript {
    $?: {
        uri: string;
        type?: string;
    };
}
export interface SGAstFunction {
    $?: {
        name: string;
    };
}
export interface SGAstField {
    $?: {
        id: string;
        type?: string;
        alwaysNotify?: string;
        onChange?: string;
    };
}
export interface SGAstInterface {
    function?: SGAstFunction[];
    field?: SGAstField[];
}
export interface SGAstComponent {
    $?: {
        name: string;
        extends: string;
    };
    script?: SGAstScript[];
    interface?: SGAst;
    children?: any;
}
export interface SGAst {
    component?: SGAstComponent;
}
export declare class XmlFile {
    pathAbsolute: string;
    /**
     * The absolute path to the file, relative to the pkg
     */
    pkgPath: string;
    program: Program;
    constructor(pathAbsolute: string, 
    /**
     * The absolute path to the file, relative to the pkg
     */
    pkgPath: string, program: Program);
    private cache;
    /**
     * The list of possible autoImport codebehind pkg paths.
     */
    private possibleCodebehindPkgPaths;
    /**
     * An unsubscribe function for the dependencyGraph subscription
     */
    private unsubscribeFromDependencyGraph;
    /**
     * If the file was given type definitions during parse. XML files never have a typedef
     */
    hasTypedef: boolean;
    /**
     * The range of the component's name value
     */
    componentNameRange: Range;
    /**
     * The range of the component's parent name (if exist
     */
    parentNameRange: Range;
    /**
     * The extension for this file
     */
    extension: string;
    /**
     * The list of script imports delcared in the XML of this file.
     * This excludes parent imports and auto codebehind imports
     */
    scriptTagImports: FileReference[];
    /**
     * List of all pkgPaths to scripts that this XmlFile depends on directly, regardless of whether they are loaded in the program or not.
     * This does not account for parent component scripts
     * coming from:
     *  - script tags
     *  - implied codebehind file
     *  - import statements from imported scripts or their descendents
     */
    getAllDependencies(): string[];
    /**
     * List of all pkgPaths to scripts that this XmlFile depends on that are actually loaded into the program.
     * This does not account for parent component scripts.
     * coming from:
     *  - script tags
     *  - inferred codebehind file
     *  - import statements from imported scripts or their descendants
     */
    getAvailableScriptImports(): string[];
    getDiagnostics(): BsDiagnostic[];
    addDiagnostics(diagnostics: BsDiagnostic[]): void;
    /**
     * The range of the entire file
     */
    fileRange: Range;
    diagnostics: BsDiagnostic[];
    parsedXml: SGAst;
    parser: Parser;
    callables: Callable[];
    functionCalls: FunctionCall[];
    functionScopes: FunctionScope[];
    /**
     * The name of the component that this component extends.
     * Available after `parse()`
     */
    parentComponentName: string;
    /**
     * The name of the component declared in this xml file
     * Available after `parse()`
     */
    componentName: string;
    /**
     * Does this file need to be transpiled?
     */
    needsTranspiled: boolean;
    lines: string[];
    /**
     * The full file contents
     */
    fileContents: string;
    /**
     * TODO: do we need this for xml files?
     */
    propertyNameCompletions: CompletionItem[];
    private uriRangeRegex;
    private scriptTypeRegex;
    parse(fileContents: string): Promise<void>;
    /**
     * Attach the file to the dependency graph so it can monitor changes.
     * Also notify the dependency graph of our current dependencies so other dependents can be notified.
     */
    attachDependencyGraph(dependencyGraph: DependencyGraph): void;
    /**
     * The key used in the dependency graph for this file.
     * If we have a component name, we will use that so we can be discoverable by child components.
     * If we don't have a component name, use the pkgPath so at least we can self-validate
     */
    get dependencyGraphKey(): string;
    /**
     * The key used in the dependency graph for this component's parent.
     * If we have aparent, we will use that. If we don't, this will return undefined
     */
    get parentComponentDependencyGraphKey(): string;
    private parseDeferred;
    /**
     * Indicates that the file is completely ready for interaction
     */
    isReady(): Promise<void>;
    /**
     * Determines if this xml file has a reference to the specified file (or if it's itself)
     * @param file
     */
    doesReferenceFile(file: File): boolean;
    /**
     * Get all available completions for the specified position
     * @param lineIndex
     * @param columnIndex
     */
    getCompletions(position: Position): Promise<CompletionItem[]>;
    /**
     * Scan the xml and find the range of the parent component's name in the `extends="ParentComponentName"` attribute of the component
     */
    findExtendsPosition(fullText: string): Range;
    /**
     * Get the parent component (the component this component extends)
     */
    get parentComponent(): XmlFile;
    getHover(position: Position): Promise<Hover>;
    getReferences(position: Position): Promise<Location[]>;
    getFunctionScopeAtPosition(position: Position, functionScopes?: FunctionScope[]): FunctionScope;
    /**
     * Walk up the ancestor chain and aggregate all of the script tag imports
     */
    getAncestorScriptTagImports(): any[];
    /**
     * Remove this file from the dependency graph as a node
     */
    detachDependencyGraph(dependencyGraph: DependencyGraph): void;
    /**
     * Get the list of script imports that this file needs to include.
     * It compares the list of imports on this file to those of its parent,
     * and only includes the ones that are not found on the parent.
     * If no parent is found, all imports are returned
     */
    private getMissingImportsForTranspile;
    private logDebug;
    /**
     * Convert the brightscript/brighterscript source code into valid brightscript
     */
    transpile(): CodeWithSourceMap;
    dispose(): void;
}
