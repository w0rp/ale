"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.util = exports.loadPlugins = exports.standardizePath = exports.Util = void 0;
const fs = require("fs");
const fsExtra = require("fs-extra");
const jsonc_parser_1 = require("jsonc-parser");
const path = require("path");
const rokuDeploy = require("roku-deploy");
const vscode_uri_1 = require("vscode-uri");
const xml2js = require("xml2js");
const DiagnosticMessages_1 = require("./DiagnosticMessages");
const BooleanType_1 = require("./types/BooleanType");
const DoubleType_1 = require("./types/DoubleType");
const DynamicType_1 = require("./types/DynamicType");
const FloatType_1 = require("./types/FloatType");
const FunctionType_1 = require("./types/FunctionType");
const IntegerType_1 = require("./types/IntegerType");
const InvalidType_1 = require("./types/InvalidType");
const LongIntegerType_1 = require("./types/LongIntegerType");
const ObjectType_1 = require("./types/ObjectType");
const StringType_1 = require("./types/StringType");
const VoidType_1 = require("./types/VoidType");
const Parser_1 = require("./parser/Parser");
const Logger_1 = require("./Logger");
const lexer_1 = require("./lexer");
const astUtils_1 = require("./astUtils");
class Util {
    clearConsole() {
        // process.stdout.write('\x1Bc');
    }
    /**
     * Determine if the file exists
     * @param filePath
     */
    async fileExists(filePath) {
        if (!filePath) {
            return false;
        }
        else {
            return fsExtra.pathExists(filePath);
        }
    }
    /**
     * Determine if this path is a directory
     */
    isDirectorySync(dirPath) {
        return fs.existsSync(dirPath) && fs.lstatSync(dirPath).isDirectory();
    }
    /**
     * Load a file from disc into a string
     * @param filePath
     */
    async getFileContents(filePath) {
        let file = await fsExtra.readFile(filePath);
        let fileContents = file.toString();
        return fileContents;
    }
    /**
     * Given a pkg path of any kind, transform it to a roku-specific pkg path (i.e. "pkg:/some/path.brs")
     */
    getRokuPkgPath(pkgPath) {
        pkgPath = pkgPath.replace(/\\/g, '/');
        return 'pkg:/' + pkgPath;
    }
    /**
     * Given a path to a file/directory, replace all path separators with the current system's version.
     * @param filePath
     */
    pathSepNormalize(filePath, separator) {
        if (!filePath) {
            return filePath;
        }
        separator = separator ? separator : path.sep;
        return filePath.replace(/[\\/]+/g, separator);
    }
    /**
     * Find the path to the config file.
     * If the config file path doesn't exist
     * @param configFilePath
     */
    async getConfigFilePath(cwd) {
        cwd = cwd !== null && cwd !== void 0 ? cwd : process.cwd();
        let configPath = path.join(cwd, 'bsconfig.json');
        //find the nearest config file path
        for (let i = 0; i < 100; i++) {
            if (await this.fileExists(configPath)) {
                return configPath;
            }
            else {
                let parentDirPath = path.dirname(path.dirname(configPath));
                configPath = path.join(parentDirPath, 'bsconfig.json');
            }
        }
    }
    getRangeFromOffsetLength(text, offset, length) {
        let lineIndex = 0;
        let colIndex = 0;
        for (let i = 0; i < text.length; i++) {
            if (offset === i) {
                break;
            }
            let char = text[i];
            if (char === '\n' || (char === '\r' && text[i + 1] === '\n')) {
                lineIndex++;
                colIndex = 0;
                i++;
                continue;
            }
            else {
                colIndex++;
            }
        }
        return exports.util.createRange(lineIndex, colIndex, lineIndex, colIndex + length);
    }
    /**
     * Load the contents of a config file.
     * If the file extends another config, this will load the base config as well.
     * @param configFilePath
     * @param parentProjectPaths
     */
    async loadConfigFile(configFilePath, parentProjectPaths, cwd = process.cwd()) {
        if (configFilePath) {
            //if the config file path starts with question mark, then it's optional. return undefined if it doesn't exist
            if (configFilePath.startsWith('?')) {
                //remove leading question mark
                configFilePath = configFilePath.substring(1);
                if (await fsExtra.pathExists(path.resolve(cwd, configFilePath)) === false) {
                    return undefined;
                }
            }
            //keep track of the inheritance chain
            parentProjectPaths = parentProjectPaths ? parentProjectPaths : [];
            configFilePath = path.resolve(cwd, configFilePath);
            if (parentProjectPaths === null || parentProjectPaths === void 0 ? void 0 : parentProjectPaths.includes(configFilePath)) {
                parentProjectPaths.push(configFilePath);
                parentProjectPaths.reverse();
                throw new Error('Circular dependency detected: "' + parentProjectPaths.join('" => ') + '"');
            }
            //load the project file
            let projectFileContents = await this.getFileContents(configFilePath);
            let parseErrors = [];
            let projectConfig = jsonc_parser_1.parse(projectFileContents, parseErrors);
            if (parseErrors.length > 0) {
                let err = parseErrors[0];
                let diagnostic = Object.assign(Object.assign({}, DiagnosticMessages_1.DiagnosticMessages.bsConfigJsonHasSyntaxErrors(jsonc_parser_1.printParseErrorCode(parseErrors[0].error))), { file: {
                        pathAbsolute: configFilePath
                    }, range: this.getRangeFromOffsetLength(projectFileContents, err.offset, err.length) });
                throw diagnostic; //eslint-disable-line @typescript-eslint/no-throw-literal
            }
            this.resolvePluginPaths(projectConfig, configFilePath);
            let projectFileCwd = path.dirname(configFilePath);
            let result;
            //if the project has a base file, load it
            if (projectConfig && typeof projectConfig.extends === 'string') {
                let baseProjectConfig = await this.loadConfigFile(projectConfig.extends, [...parentProjectPaths, configFilePath], projectFileCwd);
                //extend the base config with the current project settings
                result = Object.assign(Object.assign({}, baseProjectConfig), projectConfig);
            }
            else {
                result = projectConfig;
                let ancestors = parentProjectPaths ? parentProjectPaths : [];
                ancestors.push(configFilePath);
                result._ancestors = parentProjectPaths;
            }
            //make any paths in the config absolute (relative to the CURRENT config file)
            if (result.outFile) {
                result.outFile = path.resolve(projectFileCwd, result.outFile);
            }
            if (result.rootDir) {
                result.rootDir = path.resolve(projectFileCwd, result.rootDir);
            }
            if (result.cwd) {
                result.cwd = path.resolve(projectFileCwd, result.cwd);
            }
            return result;
        }
    }
    /**
     * Relative paths to scripts in plugins should be resolved relatively to the bsconfig file
     * and de-duplicated
     * @param config Parsed configuration
     * @param configFilePath Path of the configuration file
     */
    resolvePluginPaths(config, configFilePath) {
        var _a;
        if (((_a = config.plugins) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            const relPath = path.dirname(configFilePath);
            const exists = {};
            config.plugins = config.plugins.map(p => {
                return (p === null || p === void 0 ? void 0 : p.startsWith('.')) ? path.resolve(relPath, p) : p;
            }).filter(p => {
                if (!p || exists[p]) {
                    return false;
                }
                exists[p] = true;
                return true;
            });
        }
    }
    /**
     * Do work within the scope of a changed current working directory
     * @param targetCwd
     * @param callback
     */
    cwdWork(targetCwd, callback) {
        let originalCwd = process.cwd();
        if (targetCwd) {
            process.chdir(targetCwd);
        }
        let result;
        let err;
        try {
            result = callback();
        }
        catch (e) {
            err = e;
        }
        if (targetCwd) {
            process.chdir(originalCwd);
        }
        if (err) {
            throw err;
        }
        else {
            return result;
        }
    }
    /**
     * Given a BsConfig object, start with defaults,
     * merge with bsconfig.json and the provided options.
     * @param config
     */
    async normalizeAndResolveConfig(config) {
        let result = this.normalizeConfig({});
        //if no options were provided, try to find a bsconfig.json file
        if (!config || !config.project) {
            result.project = await this.getConfigFilePath(config === null || config === void 0 ? void 0 : config.cwd);
        }
        else {
            //use the config's project link
            result.project = config.project;
        }
        if (result.project) {
            let configFile = await this.loadConfigFile(result.project, null, config === null || config === void 0 ? void 0 : config.cwd);
            result = Object.assign(result, configFile);
        }
        //override the defaults with the specified options
        result = Object.assign(result, config);
        return result;
    }
    /**
     * Set defaults for any missing items
     * @param config
     */
    normalizeConfig(config) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        config = config || {};
        config.deploy = config.deploy === true ? true : false;
        //use default options from rokuDeploy
        config.files = (_a = config.files) !== null && _a !== void 0 ? _a : rokuDeploy.getOptions().files;
        config.createPackage = config.createPackage === false ? false : true;
        let rootFolderName = path.basename(process.cwd());
        config.outFile = (_b = config.outFile) !== null && _b !== void 0 ? _b : `./out/${rootFolderName}.zip`;
        config.username = (_c = config.username) !== null && _c !== void 0 ? _c : 'rokudev';
        config.watch = config.watch === true ? true : false;
        config.emitFullPaths = config.emitFullPaths === true ? true : false;
        config.retainStagingFolder = config.retainStagingFolder === true ? true : false;
        config.copyToStaging = config.copyToStaging === false ? false : true;
        config.ignoreErrorCodes = (_d = config.ignoreErrorCodes) !== null && _d !== void 0 ? _d : [];
        config.diagnosticFilters = (_e = config.diagnosticFilters) !== null && _e !== void 0 ? _e : [];
        config.plugins = (_f = config.plugins) !== null && _f !== void 0 ? _f : [];
        config.autoImportComponentScript = config.autoImportComponentScript === true ? true : false;
        config.showDiagnosticsInConsole = config.showDiagnosticsInConsole === false ? false : true;
        config.sourceRoot = config.sourceRoot ? standardizePath(config.sourceRoot) : undefined;
        config.cwd = (_g = config.cwd) !== null && _g !== void 0 ? _g : process.cwd();
        config.emitDefinitions = config.emitDefinitions === true ? true : false;
        if (typeof config.logLevel === 'string') {
            config.logLevel = Logger_1.LogLevel[config.logLevel.toLowerCase()];
        }
        config.logLevel = (_h = config.logLevel) !== null && _h !== void 0 ? _h : Logger_1.LogLevel.log;
        return config;
    }
    /**
     * Get the root directory from options.
     * Falls back to options.cwd.
     * Falls back to process.cwd
     * @param options
     */
    getRootDir(options) {
        if (!options) {
            throw new Error('Options is required');
        }
        let cwd = options.cwd;
        cwd = cwd ? cwd : process.cwd();
        let rootDir = options.rootDir ? options.rootDir : cwd;
        rootDir = path.resolve(cwd, rootDir);
        return rootDir;
    }
    /**
     * Format a string with placeholders replaced by argument indexes
     * @param subject
     * @param params
     */
    stringFormat(subject, ...args) {
        return subject.replace(/{(\d+)}/g, (match, num) => {
            return typeof args[num] !== 'undefined' ? args[num] : match;
        });
    }
    /**
     * Given a list of callables as a dictionary indexed by their full name (namespace included, transpiled to underscore-separated.
     * @param callables
     */
    getCallableContainersByLowerName(callables) {
        //find duplicate functions
        const result = new Map();
        for (let callableContainer of callables) {
            let lowerName = callableContainer.callable.getName(Parser_1.ParseMode.BrightScript).toLowerCase();
            //create a new array for this name
            const list = result.get(lowerName);
            if (list) {
                list.push(callableContainer);
            }
            else {
                result.set(lowerName, [callableContainer]);
            }
        }
        return result;
    }
    /**
     * Split a file by newline characters (LF or CRLF)
     * @param text
     */
    getLines(text) {
        return text.split(/\r?\n/);
    }
    /**
     * Given an absolute path to a source file, and a target path,
     * compute the pkg path for the target relative to the source file's location
     * @param containingFilePathAbsolute
     * @param targetPath
     */
    getPkgPathFromTarget(containingFilePathAbsolute, targetPath) {
        //if the target starts with 'pkg:', it's an absolute path. Return as is
        if (targetPath.startsWith('pkg:/')) {
            targetPath = targetPath.substring(5);
            if (targetPath === '') {
                return null;
            }
            else {
                return path.normalize(targetPath);
            }
        }
        if (targetPath === 'pkg:') {
            return null;
        }
        //remove the filename
        let containingFolder = path.normalize(path.dirname(containingFilePathAbsolute));
        //start with the containing folder, split by slash
        let result = containingFolder.split(path.sep);
        //split on slash
        let targetParts = path.normalize(targetPath).split(path.sep);
        for (let part of targetParts) {
            if (part === '' || part === '.') {
                //do nothing, it means current directory
                continue;
            }
            if (part === '..') {
                //go up one directory
                result.pop();
            }
            else {
                result.push(part);
            }
        }
        return result.join(path.sep);
    }
    /**
     * Compute the relative path from the source file to the target file
     * @param pkgSourcePathAbsolute  - the absolute path to the source relative to the package location
     * @param pkgTargetPathAbsolute  - the absolute path ro the target relative to the package location
     */
    getRelativePath(pkgSourcePathAbsolute, pkgTargetPathAbsolute) {
        pkgSourcePathAbsolute = path.normalize(pkgSourcePathAbsolute);
        pkgTargetPathAbsolute = path.normalize(pkgTargetPathAbsolute);
        //break by path separator
        let sourceParts = pkgSourcePathAbsolute.split(path.sep);
        let targetParts = pkgTargetPathAbsolute.split(path.sep);
        let commonParts = [];
        //find their common root
        for (let i = 0; i < targetParts.length; i++) {
            if (targetParts[i].toLowerCase() === sourceParts[i].toLowerCase()) {
                commonParts.push(targetParts[i]);
            }
            else {
                //we found a non-matching part...so no more commonalities past this point
                break;
            }
        }
        //throw out the common parts from both sets
        sourceParts.splice(0, commonParts.length);
        targetParts.splice(0, commonParts.length);
        //throw out the filename part of source
        sourceParts.splice(sourceParts.length - 1, 1);
        //start out by adding updir paths for each remaining source part
        let resultParts = sourceParts.map(() => '..');
        //now add every target part
        resultParts = [...resultParts, ...targetParts];
        return path.join(...resultParts);
    }
    /**
     * Walks left in a DottedGetExpression and returns a VariableExpression if found, or undefined if not found
     */
    findBeginningVariableExpression(dottedGet) {
        let left = dottedGet;
        while (left) {
            if (astUtils_1.isVariableExpression(left)) {
                return left;
            }
            else if (astUtils_1.isDottedGetExpression(left)) {
                left = left.obj;
            }
            else {
                break;
            }
        }
    }
    /**
     * Test if `position` is in `range`. If the position is at the edges, will return true.
     * Adapted from core vscode
     * @param range
     * @param position
     */
    rangeContains(range, position) {
        if (position.line < range.start.line || position.line > range.end.line) {
            return false;
        }
        if (position.line === range.start.line && position.character < range.start.character) {
            return false;
        }
        if (position.line === range.end.line && position.character > range.end.character) {
            return false;
        }
        return true;
    }
    /**
     * Parse an xml file and get back a javascript object containing its results
     * @param text
     */
    parseXml(text) {
        return new Promise((resolve, reject) => {
            xml2js.parseString(text, (err, data) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(data);
                }
            });
        });
    }
    propertyCount(object) {
        let count = 0;
        for (let key in object) {
            if (object.hasOwnProperty(key)) {
                count++;
            }
        }
        return count;
    }
    padLeft(subject, totalLength, char) {
        totalLength = totalLength > 1000 ? 1000 : totalLength;
        while (subject.length < totalLength) {
            subject = char + subject;
        }
        return subject;
    }
    /**
     * Given a URI, convert that to a regular fs path
     * @param uri
     */
    uriToPath(uri) {
        let parsedPath = vscode_uri_1.URI.parse(uri).fsPath;
        //Uri annoyingly coverts all drive letters to lower case...so this will bring back whatever case it came in as
        let match = /\/\/\/([a-z]:)/i.exec(uri);
        if (match) {
            let originalDriveCasing = match[1];
            parsedPath = originalDriveCasing + parsedPath.substring(2);
        }
        const normalizedPath = path.normalize(parsedPath);
        return normalizedPath;
    }
    /**
     * Force the drive letter to lower case
     * @param fullPath
     */
    driveLetterToLower(fullPath) {
        if (fullPath) {
            let firstCharCode = fullPath.charCodeAt(0);
            if (
            //is upper case A-Z
            firstCharCode >= 65 && firstCharCode <= 90 &&
                //next char is colon
                fullPath[1] === ':') {
                fullPath = fullPath[0].toLowerCase() + fullPath.substring(1);
            }
        }
        return fullPath;
    }
    /**
     * Determine if two arrays containing primitive values are equal.
     * This considers order and compares by equality.
     */
    areArraysEqual(arr1, arr2) {
        if (arr1.length !== arr2.length) {
            return false;
        }
        for (let i = 0; i < arr1.length; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Given a file path, convert it to a URI string
     */
    pathToUri(pathAbsolute) {
        return vscode_uri_1.URI.file(pathAbsolute).toString();
    }
    /**
     * Get the outDir from options, taking into account cwd and absolute outFile paths
     * @param options
     */
    getOutDir(options) {
        options = this.normalizeConfig(options);
        let cwd = path.normalize(options.cwd ? options.cwd : process.cwd());
        if (path.isAbsolute(options.outFile)) {
            return path.dirname(options.outFile);
        }
        else {
            return path.normalize(path.join(cwd, path.dirname(options.outFile)));
        }
    }
    /**
     * Get paths to all files on disc that match this project's source list
     */
    async getFilePaths(options) {
        let rootDir = this.getRootDir(options);
        let files = await rokuDeploy.getFilePaths(options.files, rootDir);
        return files;
    }
    /**
     * Given a path to a brs file, compute the path to a theoretical d.bs file.
     * Only `.brs` files can have typedef path, so return undefined for everything else
     */
    getTypedefPath(brsSrcPath) {
        const typedefPath = brsSrcPath
            .replace(/\.brs$/i, '.d.bs')
            .toLowerCase();
        if (typedefPath.endsWith('.d.bs')) {
            return typedefPath;
        }
        else {
            return undefined;
        }
    }
    /**
     * Determine whether this diagnostic should be supressed or not, based on brs comment-flags
     * @param diagnostic
     */
    diagnosticIsSuppressed(diagnostic) {
        //for now, we only support suppressing brs file diagnostics
        if (astUtils_1.isBrsFile(diagnostic.file)) {
            for (let flag of diagnostic.file.commentFlags) {
                //this diagnostic is affected by this flag
                if (this.rangeContains(flag.affectedRange, diagnostic.range.start)) {
                    //if the flag acts upon this diagnostic's code
                    if (flag.codes === null || flag.codes.includes(diagnostic.code)) {
                        return true;
                    }
                }
            }
        }
    }
    /**
     * Small tokenizer for bs:disable comments
     */
    tokenizeBsDisableComment(token) {
        if (token.kind !== lexer_1.TokenKind.Comment) {
            return null;
        }
        let lowerText = token.text.toLowerCase();
        let offset = 0;
        let commentTokenText;
        if (token.text.startsWith(`'`)) {
            commentTokenText = `'`;
            offset = 1;
            lowerText = lowerText.substring(1);
        }
        else if (lowerText.startsWith('rem')) {
            commentTokenText = lowerText.substring(0, 3);
            offset = 3;
            lowerText = lowerText.substring(3);
        }
        let disableType;
        //trim leading/trailing whitespace
        let len = lowerText.length;
        lowerText = lowerText.trimLeft();
        offset += len - lowerText.length;
        if (lowerText.startsWith('bs:disable-line')) {
            lowerText = lowerText.substring('bs:disable-line'.length);
            offset += 'bs:disable-line'.length;
            disableType = 'line';
        }
        else if (lowerText.startsWith('bs:disable-next-line')) {
            lowerText = lowerText.substring('bs:disable-next-line'.length);
            offset += 'bs:disable-next-line'.length;
            disableType = 'next-line';
        }
        else {
            return null;
        }
        //do something with the colon
        if (lowerText.startsWith(':')) {
            lowerText = lowerText.substring(1);
            offset += 1;
        }
        let items = this.tokenizeByWhitespace(lowerText);
        let codes = [];
        for (let item of items) {
            codes.push({
                code: item.text,
                range: exports.util.createRange(token.range.start.line, token.range.start.character + offset + item.startIndex, token.range.start.line, token.range.start.character + offset + item.startIndex + item.text.length)
            });
        }
        return {
            commentTokenText: commentTokenText,
            disableType: disableType,
            codes: codes
        };
    }
    /**
     * Given a string, extract each item split by whitespace
     * @param text
     */
    tokenizeByWhitespace(text) {
        let tokens = [];
        let currentToken = null;
        for (let i = 0; i < text.length; i++) {
            let char = text[i];
            //if we hit whitespace
            if (char === ' ' || char === '\t') {
                if (currentToken) {
                    tokens.push(currentToken);
                    currentToken = null;
                }
                //we hit non-whitespace
            }
            else {
                if (!currentToken) {
                    currentToken = {
                        startIndex: i,
                        text: ''
                    };
                }
                currentToken.text += char;
            }
        }
        if (currentToken) {
            tokens.push(currentToken);
        }
        return tokens;
    }
    /**
     * Walks up the chain
     * @param currentPath
     */
    async findClosestConfigFile(currentPath) {
        //make the path absolute
        currentPath = path.resolve(path.normalize(currentPath));
        let previousPath;
        //using ../ on the root of the drive results in the same file path, so that's how we know we reached the top
        while (previousPath !== currentPath) {
            previousPath = currentPath;
            let bsPath = path.join(currentPath, 'bsconfig.json');
            let brsPath = path.join(currentPath, 'brsconfig.json');
            if (await this.fileExists(bsPath)) {
                return bsPath;
            }
            else if (await this.fileExists(brsPath)) {
                return brsPath;
            }
            else {
                //walk upwards one directory
                currentPath = path.resolve(path.join(currentPath, '../'));
            }
        }
        //got to the root path, no config file exists
    }
    /**
     * Set a timeout for the specified milliseconds, and resolve the promise once the timeout is finished.
     * @param milliseconds
     */
    sleep(milliseconds) {
        return new Promise((resolve) => {
            //if milliseconds is 0, don't actually timeout (improves unit test throughput)
            if (milliseconds === 0) {
                process.nextTick(resolve);
            }
            else {
                setTimeout(resolve, milliseconds);
            }
        });
    }
    /**
     * Given an array, map and then flatten
     * @param arr
     * @param cb
     */
    flatMap(array, cb) {
        return Array.prototype.concat.apply([], array.map(cb));
    }
    /**
     * Determines if the position is greater than the range. This means
     * the position does not touch the range, and has a position greater than the end
     * of the range. A position that touches the last line/char of a range is considered greater
     * than the range, because the `range.end` is EXclusive
     */
    positionIsGreaterThanRange(position, range) {
        //if the position is a higher line than the range
        if (position.line > range.end.line) {
            return true;
        }
        else if (position.line < range.end.line) {
            return false;
        }
        //they are on the same line
        //if the position's char is greater than or equal to the range's
        if (position.character >= range.end.character) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Get a location object back by extracting location information from other objects that contain location
     */
    getRange(startObj, endObj) {
        return exports.util.createRangeFromPositions(startObj.range.start, endObj.range.end);
    }
    /**
     * If the two items both start on the same line
     */
    sameStartLine(first, second) {
        if (first && second && first.range.start.line === second.range.start.line) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * If the two items have lines that touch
     * @param first
     * @param second
     */
    linesTouch(first, second) {
        if (first && second && (first.range.start.line === second.range.start.line ||
            first.range.start.line === second.range.end.line ||
            first.range.end.line === second.range.start.line ||
            first.range.end.line === second.range.end.line)) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Given text with (or without) dots separating text, get the rightmost word.
     * (i.e. given "A.B.C", returns "C". or "B" returns "B because there's no dot)
     */
    getTextAfterFinalDot(name) {
        if (name) {
            let parts = name.split('.');
            if (parts.length > 0) {
                return parts[parts.length - 1];
            }
        }
    }
    /**
     * Find a script import that the current position touches, or undefined if not found
     */
    getScriptImportAtPosition(scriptImports, position) {
        let scriptImport = scriptImports.find((x) => {
            return x.filePathRange.start.line === position.line &&
                //column between start and end
                position.character >= x.filePathRange.start.character &&
                position.character <= x.filePathRange.end.character;
        });
        return scriptImport;
    }
    /**
     * Given the class name text, return a namespace-prefixed name.
     * If the name already has a period in it, or the namespaceName was not provided, return the class name as is.
     * If the name does not have a period, and a namespaceName was provided, return the class name prepended by the namespace name.
     * If no namespace is provided, return the `className` unchanged.
     */
    getFullyQualifiedClassName(className, namespaceName) {
        if (className.includes('.') === false && namespaceName) {
            return `${namespaceName}.${className}`;
        }
        else {
            return className;
        }
    }
    splitIntoLines(string) {
        return string.split(/\r?\n/g);
    }
    getTextForRange(string, range) {
        let lines;
        if (Array.isArray(string)) {
            lines = string;
        }
        else {
            lines = this.splitIntoLines(string);
        }
        const start = range.start;
        const end = range.end;
        let endCharacter = end.character;
        // If lines are the same we need to subtract out our new starting position to make it work correctly
        if (start.line === end.line) {
            endCharacter -= start.character;
        }
        let rangeLines = [lines[start.line].substring(start.character)];
        for (let i = start.line + 1; i <= end.line; i++) {
            rangeLines.push(lines[i]);
        }
        const lastLine = rangeLines.pop();
        rangeLines.push(lastLine.substring(0, endCharacter));
        return rangeLines.join('\n');
    }
    /**
     * Helper for creating `Range` objects. Prefer using this function because vscode-languageserver's `util.createRange()` is significantly slower
     */
    createRange(startLine, startCharacter, endLine, endCharacter) {
        return {
            start: {
                line: startLine,
                character: startCharacter
            },
            end: {
                line: endLine,
                character: endCharacter
            }
        };
    }
    /**
     * Create a `Range` from two `Position`s
     */
    createRangeFromPositions(startPosition, endPosition) {
        return {
            start: {
                line: startPosition.line,
                character: startPosition.character
            },
            end: {
                line: endPosition.line,
                character: endPosition.character
            }
        };
    }
    /**
     * Create a `Position` object. Prefer this over `Position.create` for performance reasons
     */
    createPosition(line, character) {
        return {
            line: line,
            character: character
        };
    }
    /**
     * Convert a list of tokens into a string, including their leading whitespace
     */
    tokensToString(tokens) {
        let result = '';
        //skip iterating the final token
        for (let i = 0; i < tokens.length; i++) {
            let token = tokens[i];
            result += token.leadingWhitespace + token.text;
        }
        return result;
    }
    /**
     * Convert a token into a BscType
     */
    tokenToBscType(token) {
        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
        switch (token.kind) {
            case lexer_1.TokenKind.Boolean:
            case lexer_1.TokenKind.True:
            case lexer_1.TokenKind.False:
                return new BooleanType_1.BooleanType();
            case lexer_1.TokenKind.Double:
            case lexer_1.TokenKind.DoubleLiteral:
                return new DoubleType_1.DoubleType();
            case lexer_1.TokenKind.Dynamic:
                return new DynamicType_1.DynamicType();
            case lexer_1.TokenKind.Float:
            case lexer_1.TokenKind.FloatLiteral:
                return new FloatType_1.FloatType();
            case lexer_1.TokenKind.Function:
                //TODO should there be a more generic function type without a signature that's assignable to all other function types?
                return new FunctionType_1.FunctionType(new DynamicType_1.DynamicType());
            case lexer_1.TokenKind.Integer:
            case lexer_1.TokenKind.IntegerLiteral:
                return new IntegerType_1.IntegerType();
            case lexer_1.TokenKind.Invalid:
                return new InvalidType_1.InvalidType();
            case lexer_1.TokenKind.LongInteger:
            case lexer_1.TokenKind.LongIntegerLiteral:
                return new LongIntegerType_1.LongIntegerType();
            case lexer_1.TokenKind.Object:
                return new ObjectType_1.ObjectType();
            case lexer_1.TokenKind.String:
            case lexer_1.TokenKind.StringLiteral:
            case lexer_1.TokenKind.TemplateStringExpressionBegin:
            case lexer_1.TokenKind.TemplateStringExpressionEnd:
            case lexer_1.TokenKind.TemplateStringQuasi:
                return new StringType_1.StringType();
            case lexer_1.TokenKind.Void:
                return new VoidType_1.VoidType();
            case lexer_1.TokenKind.Identifier:
                switch (token.text.toLowerCase()) {
                    case 'boolean':
                        return new BooleanType_1.BooleanType();
                    case 'double':
                        return new DoubleType_1.DoubleType();
                    case 'float':
                        return new FloatType_1.FloatType();
                    case 'function':
                        return new FunctionType_1.FunctionType(new DynamicType_1.DynamicType());
                    case 'integer':
                        return new IntegerType_1.IntegerType();
                    case 'invalid':
                        return new InvalidType_1.InvalidType();
                    case 'longinteger':
                        return new LongIntegerType_1.LongIntegerType();
                    case 'object':
                        return new ObjectType_1.ObjectType();
                    case 'string':
                        return new StringType_1.StringType();
                    case 'void':
                        return new VoidType_1.VoidType();
                }
        }
    }
}
exports.Util = Util;
/**
 * A tagged template literal function for standardizing the path.
 */
function standardizePath(stringParts, ...expressions) {
    let result = [];
    for (let i = 0; i < stringParts.length; i++) {
        result.push(stringParts[i], expressions[i]);
    }
    return exports.util.driveLetterToLower(rokuDeploy.standardizePath(result.join('')));
}
exports.standardizePath = standardizePath;
function loadPlugins(cwd, pathOrModules, onError) {
    return pathOrModules.reduce((acc, pathOrModule) => {
        if (typeof pathOrModule === 'string') {
            try {
                let loaded = resolveRequire(cwd, pathOrModule);
                let plugin = loaded.default ? loaded.default : loaded;
                if (!plugin.name) {
                    plugin.name = pathOrModule;
                }
                acc.push(plugin);
            }
            catch (err) {
                if (onError) {
                    onError(pathOrModule, err);
                }
                else {
                    throw err;
                }
            }
        }
        return acc;
    }, []);
}
exports.loadPlugins = loadPlugins;
function resolveRequire(cwd, pathOrModule) {
    let target = pathOrModule;
    if (!path.isAbsolute(pathOrModule)) {
        const localPath = path.resolve(cwd, pathOrModule);
        if (fs.existsSync(localPath)) {
            target = localPath;
        }
        else {
            const modulePath = path.resolve(cwd, 'node_modules', pathOrModule);
            if (fs.existsSync(modulePath)) {
                target = modulePath;
            }
        }
    }
    // eslint-disable-next-line
    return require(target);
}
exports.util = new Util();
exports.default = exports.util;
//# sourceMappingURL=util.js.map