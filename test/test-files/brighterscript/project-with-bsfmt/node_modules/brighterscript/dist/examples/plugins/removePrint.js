"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const reflection_1 = require("../../astUtils/reflection");
const visitors_1 = require("../../astUtils/visitors");
const Statement_1 = require("../../parser/Statement");
// entry point
const pluginInterface = {
    name: 'removePrint',
    afterFileParse: afterFileParse
};
exports.default = pluginInterface;
// note: it is normally not recommended to modify the AST too much at this stage,
// because if the plugin runs in a language-server context it could break intellisense
function afterFileParse(file) {
    if (!reflection_1.isBrsFile(file)) {
        return;
    }
    // visit functions bodies and replace `PrintStatement` nodes with `EmptyStatement`
    file.parser.references.functionExpressions.forEach((fun) => {
        fun.body.walk(visitors_1.createVisitor({
            PrintStatement: (statement) => new Statement_1.EmptyStatement()
        }), {
            walkMode: visitors_1.WalkMode.visitStatements
        });
    });
}
//# sourceMappingURL=removePrint.js.map